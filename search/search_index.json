{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Beranda","text":"<p>Selamat Datang di Jump &amp; Survive Documentation!</p> <p></p>"},{"location":"#deskripsi-singkat","title":"Deskripsi Singkat","text":"<p>Jump &amp; Survive adalah game 2D platformer sederhana yang dibuat menggunakan bahasa pemrograman C dan library SDL3. Dalam game ini, pemain mengendalikan karakter utama yang harus melompat dan menghindari rintangan untuk mencapai tujuan akhir.</p>"},{"location":"#fitur-fitur","title":"Fitur-Fitur","text":"<ol> <li> <p>Kontrol Pemain    Pemain dapat bergerak ke kiri, kanan, dan melakukan lompatan untuk menjelajahi level.</p> </li> <li> <p>Rintangan dan Tantangan    Berbagai jenis rintangan, termasuk jebakan, spike, serta elemen lainnya yang harus dihindari.</p> </li> <li> <p>Level berbasis JSON dengan Kesulitan yang Meningkat    Sebelas level dengan distribusi rintangan, dan penempatan objek yang berbeda-beda. Setiap level menawarkan tantangan baru dengan kesulitan yang meningkat. Pengguna dapat membuat level baru dengan format JSON yang telah ditentukan.</p> </li> <li> <p>Statistik Permainan &amp; Leaderboard    Game Stats / Statistik pemain, seperti skor, nyawa, dan waktu permainan, dicatat dan ditampilkan melalui antarmuka pengguna (UI). Pemain dapat melihat statistik mereka dan membandingkannya dengan pemain lain melalui leaderboard.</p> </li> <li> <p>Sistem Tile Map Berbasis Array 2D    Tile system menggunakan array 2D untuk merepresentasikan map secara grid.</p> </li> <li> <p>User Interface &amp; Menu Utama    Tampilan menu utama. Selain itu, terdapat tampilan pause, game over, dan level transition.</p> </li> </ol>"},{"location":"#teknologi-yang-digunakan","title":"Teknologi yang Digunakan","text":"<ul> <li>Bahasa Pemrograman:<ul> <li>C</li> </ul> </li> <li>Library:<ul> <li>Simple DirectMedia Layer 3 (SDL3)</li> <li>cJSON</li> </ul> </li> <li>Build Tools:<ul> <li>GNU Make</li> <li>GNU Compiler Collection (GCC)</li> </ul> </li> <li>Version Control System:<ul> <li>Git</li> </ul> </li> </ul> <p>Teknis pengembangan dan dokumentasi lebih lanjut dapat dilihat pada Teknis Pengembangan.</p>"},{"location":"#cara-menjalankan","title":"Cara Menjalankan","text":"<p>Untuk instalasi dan penggunaan, kunjungi Cara Menjalankan Program</p>"},{"location":"#cara-memainkan","title":"Cara Memainkan","text":"<p>Kunjungi Cara Memainkan</p>"},{"location":"how-to-play/","title":"Cara Memainkan","text":"<ul> <li> <p>Pilih Start Game untuk memulai permainan.   </p> </li> <li> <p>Gunakan tombol arah (Arrow Keys) untuk bergerak ke kiri, kanan, dan melompat.    </p> </li> <li> <p>Hindari menyentuh void (area kosong di bawah level) dan berbagai jenis rintangan seperti:</p> <ul> <li>Spike (paku)</li> <li>Saw (gergaji statis)</li> <li>Moving Saw (gergaji bergerak)</li> <li>Fake Coins (koin palsu)</li> </ul> Spike Saw Moving Saw </li> <li> <p>Kumpulkan semua koin yang ada di setiap level untuk memunculkan gerbang keluar.   </p> </li> <li> <p>Setelah semua koin terkumpul, masuk ke gerbang untuk melanjutkan ke level berikutnya.</p> </li> <li> <p>Jika pemain terkena rintangan atau jatuh ke dalam void, maka:</p> <ul> <li>Nyawa pemain akan berkurang sebanyak 1.</li> <li>Pemain akan kembali ke titik awal (spawn point) di level tersebut.</li> <li>Jika nyawa pemain habis, maka akan muncul tampilan Game Over.   </li> </ul> </li> <li> <p>Jika pemain berhasil melewati seluruh level dari level 0 hingga level 10, maka akan muncul tampilan Congratulations.   </p> </li> <li> <p>Tekan tombol ESC saat berada di dalam game untuk memunculkan menu pause.   </p> <ul> <li>Tekan tombol ENTER untuk melanjutkan permainan (resume) dari menu pause.</li> <li>Tekan tombol ESC sekali lagi saat berada di menu pause untuk kembali ke menu utama.</li> <li>Tekan tombol P untuk kembali ke level sebelumnya.</li> </ul> </li> <li> <p>Jika permainan game over atau menang, pemain akan diminta untuk memasukkan nama untuk menyimpan statistik permainan ke leaderboard.   </p> </li> <li> <p>Pemain dapat melihat leaderboard setelah memilih pilihan 'Leaderboard' di menu.   </p> </li> </ul>"},{"location":"usage/","title":"Cara Menjalankan Program","text":"<p>\u26a0 Baru teruji untuk platform Windows &amp; Linux saja</p>"},{"location":"usage/#instal-persyaratan","title":"Instal Persyaratan","text":"<p>Pastikan compiler GCC dan GNU Make telah terinstal. Jika belum, instal menggunakan perintah berikut:</p>"},{"location":"usage/#windows-menggunakan-msys2","title":"Windows (menggunakan MSYS2)","text":"<ol> <li>Unduh dan instal MSYS2.</li> <li>Buka shell/terminal MSYS2 dan jalankan:</li> </ol> <pre><code>pacman -S mingw-w64-x86_64-gcc make\n</code></pre> <p>\u26a0 Pastikan <code>gcc</code> dan <code>make</code> sudah terdaftar di environment variables di sistem Anda.</p>"},{"location":"usage/#linux","title":"Linux","text":"<ol> <li> <p>Install compiler GCC, GNU Make, <code>SDL3</code>, <code>SDL3_ttf</code>, <code>SDL3_mixer</code>, dan <code>SDL3_image</code>  menggunakan manajer paket distribusi Linux Anda.</p> <ul> <li> <p>Untuk Debian/Ubuntu, gunakan:</p> <pre><code>sudo apt install build-essential libsdl3-dev libsdl3-ttf-dev libsdl3-mixer-dev libsdl3-image-dev\n</code></pre> </li> <li> <p>Untuk Arch Linux, gunakan:</p> <pre><code>sudo pacman -S base-devel sdl3 sdl3_ttf sdl3_mixer sdl3_image\n</code></pre> </li> </ul> <p>Untuk distribusi lain, silakan sesuaikan dengan manajer paket yang digunakan.</p> </li> </ol>"},{"location":"usage/#download-proyek","title":"Download Proyek","text":"<p>Clone repository proyek menggunakan Git:</p> <pre><code>git clone https://github.com/ikhsan3adi/c5-jump-and-survive.git\ncd c5-jump-and-survive\n</code></pre> <p>Atau, unduh ZIP dari repositori dan ekstrak ke dalam folder yang diinginkan (Direkomendasikan).</p>"},{"location":"usage/#build-dan-jalankan-program","title":"Build dan Jalankan Program","text":"<p>Gunakan perintah make untuk mem-build dan menjalankan program:</p> <pre><code>make\n</code></pre> <p>Jika build berhasil, folder build dan file program (contoh <code>main.exe</code> untuk windows) akan muncul.</p>"},{"location":"usage/#membersihkan-folder-build","title":"Membersihkan Folder Build","text":"<p>Untuk menghapus file hasil kompilasi dan membersihkan folder build, jalankan:</p> <pre><code>make clean\n</code></pre>"},{"location":"development/","title":"Teknis Pengembangan","text":"<p>Halaman ini bertujuan untuk memberikan gambaran umum tentang pengembangan proyek, termasuk bagaimana proses pengembangan dilakukan, pembagian tugas antar anggota, branch-branch yang digunakan, struktur arsitektur proyek, dan teknologi yang digunakan.</p>"},{"location":"development/#gambaran-umum","title":"Gambaran Umum","text":""},{"location":"development/#pembagian-tugas-anggota-kelompok","title":"Pembagian Tugas Anggota Kelompok","text":"<ol> <li> <p>Ikhsan Satriadi (241511080)</p> <p>Bertugas mengelola Game State dan mengembangkan Game Manager serta Main Driver/Game Loop utama permainan. Ikhsan juga bertanggung jawab atas pembuatan dokumentasi web proyek, merancang struktur data untuk node level, dan mengimplementasikan mekanisme parsing berkas level dari format JSON ke dalam struktur data tersebut.</p> </li> <li> <p>Muhamad Syahid (241511081)</p> <p>Fokus pada pengembangan logika entity, khususnya untuk player, serta menangani aspek fisika (physics) yang berlaku pada setiap entitas dalam game. Syahid juga mengembangkan logika untuk berbagai rintangan (obstacles) dan melakukan manajemen data level menggunakan struktur data doubly linked list.</p> </li> <li> <p>Hisyam Khaeru Umam (241511078)</p> <p>Bertanggung jawab atas pembuatan stage dan desain level/map permainan secara keseluruhan. Hisyam juga mengerjakan aspek visual untuk karakter player, manajemen audio dan sound effects (SFX), serta pembuatan berkas-berkas level dalam format JSON.</p> </li> <li> <p>Helga Athifa Hidayat (241511077)</p> <p>Mengembangkan berbagai antarmuka pengguna (UI), termasuk menu interface dan game interface yang interaktif. Helga juga bertugas melakukan manajemen assets grafis yang digunakan dalam permainan dan merancang antarmuka untuk sistem leaderboard.</p> </li> <li> <p>Hanifidin Ibrahim (241511076)</p> <p>Bertugas mengelola dan menampilkan statistik permainan (Game Stats) kepada pemain. Hanifidin juga merancang tampilan visual untuk rintangan (visual obstacle) dan mengimplementasikan fungsionalitas sistem leaderboard dengan menggunakan struktur data singly linked list.</p> </li> </ol>"},{"location":"development/#pembagian-branch","title":"Pembagian Branch","text":""},{"location":"development/#branch-program","title":"Branch program","text":"<ul> <li><code>main</code>: Menyimpan versi stabil dari program.</li> <li><code>feat/game-state</code>: Berisi pengembangan state game, seperti menu state, stage state.</li> <li><code>feat/ui</code>: Berisi pengembangan dan implementasi elemen UI, seperti teks dan HUD game.</li> <li><code>feat/main-menu</code>: Berisi implementasi logika menu utama / start menu.</li> <li><code>feat/entity-and-physics</code>: Mengembangkan logika entity (player) dan modul fisika.</li> <li><code>feat/tile-system</code>: Mengimplementasikan sistem tile untuk level design.</li> <li><code>feat/game-stat</code>: Berisi pengembangan fitur terkait statistik game, seperti skor dan waktu bermain. Juga mengelola leaderboard.</li> <li><code>feat/coins-and-other-obstacles</code>: Mengembangkan fitur koin dan rintangan dalam permainan.</li> <li><code>feat/Audio_SFX</code>: Berisi pengembangan fitur audio dan efek suara (SFX) dalam permainan.</li> <li><code>feat/parsing-level-json</code>: Mengimplementasikan mekanisme parsing berkas level dari format JSON ke dalam struktur data yang digunakan dalam permainan.</li> <li><code>feat/linked-list-map</code>: Berisi pengembangan struktur data doubly linked list untuk manajemen level dalam permainan.</li> <li><code>integration</code>: Branch untuk mengintegrasikan semua fitur yang telah dikembangkan ke dalam branch <code>main</code>.</li> </ul>"},{"location":"development/#branch-dokumentasi","title":"Branch dokumentasi","text":"<ul> <li><code>docs</code>: Branch khusus untuk dokumentasi proyek.</li> <li><code>gh-pages</code>: Branch untuk memublikasi dokumentasi menggunakan GitHub Pages.</li> </ul>"},{"location":"development/#cara-kerja-pengembangan","title":"Cara Kerja Pengembangan","text":"<ul> <li>Setiap fitur baru dikembangkan di branch terpisah untuk menjaga kebersihan branch <code>main</code>.</li> <li>Setelah fitur selesai dan diuji, branch tersebut akan di-merge ke <code>integration</code> melalui pull request. Setelah itu, branch <code>integration</code> akan diuji dan di-merge ke <code>main</code>.</li> <li>Komunikasi dilakukan secara rutin (melalui WhatsApp group, GitHub atau Trello) untuk memastikan semua anggota tetap sinkron.</li> </ul>"},{"location":"development/#arsitektur","title":"Arsitektur","text":""},{"location":"development/#state-pattern-untuk-lifecycle-game","title":"State Pattern untuk Lifecycle Game","text":"<p>Logika siklus game ini dikelola melalui state pattern. Modul <code>game_state</code> bertindak sebagai antarmuka abstrak yang mengatur alur permainan melalui state konkrit, seperti <code>menu_state</code>, <code>stage0_state</code>, dan <code>leadrboard_state</code>. Dalam modul ini, fungsi-fungsi seperti inisialisasi (<code>init()</code>), pembaruan (<code>update()</code>), dan rendering (<code>render()</code>) didefinisikan sebagai kontrak yang harus diimplementasikan oleh state konkrit. State konkrit seperti <code>menu_state</code>, <code>stage0_state</code>, dan <code>leadrboard_state</code> masing-masing mengimplementasikan logika spesifik untuk menu utama, tahap pertama permainan, dan tahap lanjutan. Disediakan juga fungsi untuk berpindah state (<code>change_game_state</code>). Dengan pemisahan ini, setiap state dapat dikembangkan dan dimodifikasi secara independen tanpa memengaruhi alur logika state lainnya.</p> <p>Definisi dan implementasi game state dapat dilihat pada:</p> <ul> <li>Modul <code>game_state</code></li> <li>Main program <code>main.c</code></li> </ul>"},{"location":"development/#tile-system-untuk-map-obstacle-dan-collision","title":"Tile System untuk Map, Obstacle, dan Collision","text":"<p>Tile system digunakan untuk mendesain map, rintangan, dan mendukung deteksi tabrakan (collision). Sistem ini memanfaatkan array 2D untuk merepresentasikan tata letak level secara grid, di mana setiap elemen array menunjukkan jenis tile, seperti platform, rintangan, atau ruang kosong.</p> <p>Implementasi dan penggunaan level dan tile system dapat dilihat pada:</p> <ul> <li>Modul <code>level</code></li> <li>Modul <code>stage0_state</code></li> </ul>"},{"location":"development/#level-modular-dengan-json","title":"Level Modular dengan JSON","text":"<p>Level permainan didefinisikan dalam format JSON, yang memungkinkan desainer untuk membuat dan mengedit level dengan mudah tanpa perlu mengubah kode sumber. Modul <code>level_parser</code> bertanggung jawab untuk membaca berkas JSON, mem-parsing data, dan mengonversinya menjadi struktur data yang digunakan dalam permainan. Ini memungkinkan fleksibilitas dalam desain level dan memudahkan penambahan atau perubahan level di masa depan. Implementasi level dan parsing berkas JSON dapat dilihat pada:</p> <ul> <li>Modul <code>level</code></li> <li>Modul <code>level_parser</code></li> </ul>"},{"location":"development/#entity-system-untuk-player-dan-objek-dinamis-lainnya","title":"Entity System untuk Player dan Objek dinamis lainnya","text":"<p>Entity system dikelola melalui modul <code>entity</code>, yang menangani semua objek dinamis seperti <code>player</code> dan enemy. Setiap entitas memiliki atribut seperti transformasi posisi yang dikelola melalui modul <code>transform</code> dan mengikuti aturan fisika yang ditentukan oleh modul <code>physics</code>.</p> <p>Desain ini memastikan modularitas, memudahkan penambahan fitur baru, dan mendukung pengembangan yang efisien dengan pemisahan tanggung jawab yang jelas di setiap modul.</p> <p>Implementasi entity, player dan modul pendukungnya dapat dilihat pada:</p> <ul> <li>Modul <code>entity</code></li> <li>Modul <code>player</code></li> <li>Modul <code>transform</code></li> <li>Modul <code>physics</code></li> </ul>"},{"location":"development/#teknologi-yang-digunakan","title":"Teknologi yang Digunakan","text":"<ul> <li>Bahasa Pemrograman:<ul> <li>C Programing Language (GCC v14.2.0)</li> </ul> </li> <li> <p>Library:</p> <ul> <li> <p>SDL3 untuk rendering grafis dan handling event.</p> <ul> <li>SDL_ttf untuk menangani teks dan font.</li> <li>SDL_mixer untuk menangani audio.</li> </ul> <p>Kami menggunakan build SDL dari: https://github.com/mmozeiko/build-sdl3</p> </li> <li> <p>cJSON untuk parsing file JSON, digunakan untuk menyimpan data level.</p> </li> </ul> </li> <li> <p>Build Tools:</p> <ul> <li>GNU Make untuk otomatisasi proses build.</li> <li>GCC (MSYS2) untuk kompilasi source code.</li> </ul> </li> <li>Version Control System:<ul> <li>Git untuk pengelolaan kode dan kolaborasi.</li> </ul> </li> <li>Dokumentasi:<ul> <li>MkDocs Material untuk pembuatan web dokumentasi teknis ini.</li> <li>GitHub Pages untuk memublikasikan dokumentasi secara online.</li> </ul> </li> <li>Code Editor:<ul> <li>Visual Studio Code dengan extension C/C++ untuk pengembangan.</li> </ul> </li> </ul>"},{"location":"development/code-structure/","title":"Struktur Kode","text":"<p>Halaman ini menjelaskan struktur kode pada proyek game 2D platformer sederhana, termasuk organisasi file dan modul-modul utama yang membentuk alur kerja game.</p>"},{"location":"development/code-structure/#organisasi-direktori","title":"Organisasi Direktori","text":"<p>Proyek ini memiliki struktur direktori berikut:</p> <pre><code>\ud83d\udcc2assets/\n  \u251c\u2500 \ud83d\udcc2fonts/\n  \u251c\u2500 \ud83d\udcc2images/\n  \u251c\u2500 \ud83d\udcc2levels/\n  \u2514\u2500 \ud83d\udcc2SFX/\n\n\ud83d\udcc2include/\n  \u251c\u2500 \ud83d\udcc2SDL3/\n  \u251c\u2500 \ud83d\udcc2cJSON/\n  \u251c\u2500 SFX.h\n  \u251c\u2500 entity.h\n  \u251c\u2500 game.h\n  \u251c\u2500 game_stat.h\n  \u251c\u2500 game_state.h\n  \u251c\u2500 leaderboard.h\n  \u251c\u2500 leaderboard_state.h\n  \u251c\u2500 level.h\n  \u251c\u2500 level_parser.h\n  \u251c\u2500 menu_state.h\n  \u251c\u2500 obstacle.h\n  \u251c\u2500 physics.h\n  \u251c\u2500 player.h\n  \u251c\u2500 stage0_state.h\n  \u251c\u2500 transform.h\n  \u251c\u2500 ui.h\n  \u251c\u2500 util.h\n  \u2514\u2500 vector.h\n\n\ud83d\udcc2src/\n  \u251c\u2500 SFX.c\n  \u251c\u2500 entity.c\n  \u251c\u2500 game.c\n  \u251c\u2500 game_stat.c\n  \u251c\u2500 game_state.c\n  \u251c\u2500 leaderboard.c\n  \u251c\u2500 leaderboard_state.c\n  \u251c\u2500 level.c\n  \u251c\u2500 level_parser.c\n  \u251c\u2500 main.c\n  \u251c\u2500 menu_state.c\n  \u251c\u2500 obstacle.c\n  \u251c\u2500 physics.c\n  \u251c\u2500 player.c\n  \u251c\u2500 stage0_state.c\n  \u251c\u2500 ui.c\n  \u2514\u2500 util.c\n\n\ud83d\udcc2bin/\n\ud83d\udcc2build/\n\ud83d\udcc2lib/\n\nleaderboard.dat\n\n.gitignore\nMakefile\nREADME.md\n</code></pre> <p>Berikut adalah penjelasan untuk setiap folder dan file:</p>"},{"location":"development/code-structure/#assets","title":"\ud83d\udcc2 assets/","text":"<p>Folder ini menyimpan semua aset yang digunakan dalam game, seperti font, gambar, dan suara.</p> <ul> <li> <p>\ud83d\udcc2 fonts/: Berisi font yang digunakan untuk teks dalam game, misalnya judul di menu, skor, atau elemen UI lainnya.</p> </li> <li> <p>\ud83d\udcc2 SFX/: Berisi file suara (.wav &amp;.mp3) yang digunakan dalam game, seperti jump, gate, coin, dead, dan gameover.</p> </li> <li> <p>\ud83d\udcc2 images/: Berisi gambar yang digunakan dalam game, seperti latar belakang level.</p> </li> <li> <p>\ud83d\udcc2 levels/: Berisi file JSON yang mendeskripsikan level dalam game. Setiap file berisi informasi tentang posisi pemain, jebakan, dan properti lainnya yang diperlukan untuk membangun level.</p> </li> </ul>"},{"location":"development/code-structure/#include","title":"\ud83d\udcc2 include/","text":"<p>Berisi header file (<code>*.h</code>) yang mendefinisikan fungsi, struktur, dan konstanta yang digunakan oleh berbagai modul dalam proyek.</p> <ul> <li> <p>\ud83d\udcc2 SDL3/:</p> <p>Berisi file header dari library SDL3. Sudah termasuk library SDL_ttf, dan SDL_mixer.</p> </li> <li> <p>\ud83d\udcc2 cJSON/:</p> <p>Berisi file header dari library cJSON, yang digunakan untuk parsing JSON.</p> </li> <li> <p>SFX.h &amp; SFX.c:</p> <p>Berisi kode yang menangani musik dan sound effect.</p> </li> <li> <p>entity.h &amp; entity.c:</p> <p>Mengatur entitas dalam game, seperti pemain, musuh, atau objek lain. Berisi fungsi untuk pembuatan, pembaruan, dan pembersihan entitas.</p> </li> <li> <p>game.h &amp; game.c:</p> <p>Berisi struktur game yang terdiri dari window dan renderer, serta prosedur untuk inisialisasi game.</p> </li> <li> <p>game_state.h &amp; game_state.c:</p> <p>State management dari game. Berisi deklarasi struktur GameState, yang merupakan blueprint dari state-state game (cth. <code>menu_state</code>, <code>stage0_state</code>). Terdapat fungsi untuk berpindah state.</p> </li> <li> <p>game_stat.h &amp; game_stat.c:</p> <p>Memuat fungsi-fungsi terkait statistik, seperti skor, nyawa dan waktu bermain.</p> </li> <li> <p>leaderboard.h &amp; leaderboard.c:</p> <p>Berisi fungsi untuk mengelola leaderboard, termasuk menyimpan dan memuat skor tertinggi.</p> </li> <li> <p>level.h &amp; level.c:</p> <p>Berisi definisi level dalam game, termasuk memuat data level dan perpindahan antar level.</p> </li> <li> <p>level_parser.h &amp; level_parser.c:</p> <p>Berisi fungsi untuk mem-parsing file level yang ditulis dalam format JSON. Menggunakan library cJSON untuk membaca data level.</p> </li> <li> <p>menu_state.h &amp; menu_state.c:</p> <p>Mengatur tampilan start menu. Implementasi dari <code>game_state</code>.</p> </li> <li> <p>obstacle.h &amp; obstacle.c:</p> <p>Mengatur tampilan dan logika obstacles, contohnya saw, spike, fake coins, dan lainnya.</p> </li> <li> <p>physics.h &amp; physics.c:</p> <p>Menangani simulasi fisika sederhana seperti gravitasi dan tabrakan(collision).</p> </li> <li> <p>player.h &amp; player.c:</p> <p>Mengatur logika perilaku pemain, seperti kontrol, pergerakan, atau interaksi dengan entitas lainnya.</p> </li> <li> <p>stage0_state.h &amp; stage0_state.c:</p> <p>Logika untuk level atau stage awal dari game. Implementasi dari <code>game_state</code>.</p> </li> <li> <p>transform.h:</p> <p>Berisi struktur transformasi seperti posisi dan ukuran.</p> </li> <li> <p>vector.h:</p> <p>Berisi struktur sederhana vector, yang memuat 2 buah angka, yaitu x dan y.</p> </li> <li> <p>ui.h &amp; ui.c:</p> <p>Berisi fungsi untuk menampilkan UI, seperti game UI (skor, nyawa dan timer), render teks, tampilan transisi level, pause, game over, dan lainnya.</p> </li> <li> <p>util.h &amp; util.c:</p> <p>Berisi fungsi utilitas/helper yang digunakan di berbagai bagian game.</p> </li> <li> <p>main.c:</p> <p>Program utama yang menjalankan game. Inisialisasi game, memuat state awal (<code>menu_state</code>), dan menjalankan loop game.</p> </li> </ul>"},{"location":"development/code-structure/#src","title":"\ud83d\udcc2 src/","text":"<p>Folder ini berisi semua file implementasi (<code>*.c</code>) dari proyek. Penjelasan fungsionalitas setiap file telah dikelompokkan bersama header-nya di bagian sebelumnya.</p>"},{"location":"development/code-structure/#bin","title":"\ud83d\udcc2 bin/","text":"<p>Folder ini menyimpan file biner dari library, yang nantinya akan disalin ke folder build setelah proses build selesai.</p>"},{"location":"development/code-structure/#build","title":"\ud83d\udcc2 build/","text":"<p>Folder ini menyimpan file biner hasil kompilasi program dan file sementara yang dihasilkan selama proses kompilasi, seperti file objek (<code>*.o</code>) atau cache build lainnya.</p>"},{"location":"development/code-structure/#lib","title":"\ud83d\udcc2 lib/","text":"<p>Folder ini berisi library eksternal yang dibutuhkan oleh proyek, seperti SDL3.</p>"},{"location":"development/code-structure/#file-di-root-directory","title":"File di Root Directory","text":"<ul> <li> <p>leaderboard.dat:</p> <p>File biner yang menyimpan data leaderboard, berisi skor tertinggi yang dicapai pemain.</p> </li> <li> <p>.gitignore:</p> <p>Berisi aturan untuk menentukan file atau folder yang harus diabaikan oleh Git, seperti file build atau cache.</p> </li> <li> <p>Makefile:</p> <p>File konfigurasi untuk alat build make, digunakan untuk mempermudah proses kompilasi game. Berisi aturan untuk mengompilasi, membersihkan, dan menjalankan program.</p> </li> <li> <p>README.md:</p> <p>Berisi deskripsi, informasi kelompok, pembagian tugas dan informasi tambahan lainnya.</p> </li> </ul>"},{"location":"development/modules/","title":"Penjelasan Modul-modul","text":"<p>Halaman ini memberikan penjelasan terperinci tentang modul-modul utama dalam game 2D platformer ini. Setiap modul dijelaskan berdasarkan perannya dalam program, fungsi utama yang diimplementasikan, serta interaksinya dengan modul lain.</p>"},{"location":"development/modules/#modul-modul","title":"Modul-modul","text":"<ul> <li> <p>Main Program</p> </li> <li> <p>Modul <code>game</code></p> </li> <li> <p>Modul <code>game_state</code></p> </li> <li> <p>Modul <code>transform</code></p> </li> <li> <p>Modul <code>vector</code></p> </li> <li> <p>Modul <code>entity</code></p> </li> <li> <p>Modul <code>physics</code></p> </li> <li> <p>Modul <code>player</code></p> </li> <li> <p>Modul <code>leaderboard</code></p> </li> <li> <p>Modul <code>level</code></p> </li> <li> <p>Modul <code>level_parser</code></p> </li> <li> <p>Modul <code>obstacle</code></p> </li> <li> <p>Modul <code>game_stat</code></p> </li> <li> <p>Modul <code>ui</code></p> </li> <li> <p>Modul <code>SFX</code></p> </li> <li> <p>Modul <code>util</code></p> </li> <li> <p>Start Menu (<code>menu_state</code>)</p> </li> <li> <p>Stage 0 (<code>stage0_state</code>)</p> </li> <li> <p>Leaderboard State (<code>leaderboard_state</code>)</p> </li> </ul>"},{"location":"development/modules/entity/","title":"Modul <code>entity</code>","text":"<p>Pembuat: Hisyam Khaeru Umam (241511078), Muhamad Syahid (241511081) &amp; Ikhsan Satriadi (241511080)</p> <p>File: <code>entity.c</code> &amp; <code>entity.h</code></p>"},{"location":"development/modules/entity/#struktur-entity","title":"Struktur <code>Entity</code>","text":""},{"location":"development/modules/entity/#entityrendercomponent","title":"EntityRenderComponent","text":"entity.h<pre><code>typedef struct\n{\n    SDL_Color color;\n} EntityRenderComponent;\n</code></pre> <p>Struktur <code>EntityRenderComponent</code> menyimpan informasi yang berkaitan dengan rendering sebuah entity, saat ini hanya menyimpan <code>color</code> dari entity.</p>"},{"location":"development/modules/entity/#entity","title":"Entity","text":"entity.h<pre><code>typedef struct\n{\n    Transform transform;\n    EntityRenderComponent render;\n    Physics physics;\n} Entity;\n</code></pre> <p>Struktur <code>Entity</code> adalah struktur utama yang merepresentasikan objek dalam game. Struktur ini terdiri dari:</p> <ul> <li><code>transform</code>: Komponen <code>Transform</code> yang menyimpan informasi posisi (<code>x</code>, <code>y</code>) dan ukuran (<code>w</code>, <code>h</code>) entity.</li> <li><code>render</code>: Komponen <code>EntityRenderComponent</code> yang menyimpan informasi rendering entity.</li> <li><code>physics</code>: Komponen <code>Physics</code> yang menyimpan informasi fisika entity seperti kecepatan, gravitasi, dan gesekan.</li> </ul>"},{"location":"development/modules/entity/#variabel-dan-konstanta","title":"Variabel dan Konstanta","text":""},{"location":"development/modules/entity/#konstanta-tile-type","title":"Konstanta Tile Type","text":"<pre><code>#define EMPTY 0\n#define PLATFORM 1\n#define SOLID_OBSTACLE 2\n#define SWITCH 3\n#define COINS 4\n#define SPIKE 5\n#define LIFE 6\n#define SAWS 7\n#define FAKE_COINS 8\n#define EXIT_GATE 9\n#define BUTTON 10\n</code></pre> <p>Konstanta-konstanta ini mendefinisikan berbagai jenis tile yang dapat terdapat dalam peta level.</p>"},{"location":"development/modules/entity/#solid_tiles","title":"solid_tiles","text":"<pre><code>extern int solid_tiles;\n</code></pre> <p>Array integer yang berisi daftar tipe-tipe tile yang dianggap solid dan akan menghalangi pergerakan entity.</p>"},{"location":"development/modules/entity/#destruct_tiles","title":"destruct_tiles","text":"<pre><code>extern int destruct_tiles;\n</code></pre> <p>Array integer yang berisi daftar tipe-tipe tile yang dianggap berbahaya atau dapat dihancurkan.</p>"},{"location":"development/modules/entity/#gate_tiles","title":"gate_tiles","text":"<pre><code>extern Vector gate_tiles[10];\n</code></pre> <p>Array <code>Vector</code> (struct dengan anggota <code>x</code> dan <code>y</code> untuk koordinat) yang menyimpan posisi tile gerbang keluar. Ukuran array menunjukkan maksimum 10 tile gerbang.</p>"},{"location":"development/modules/entity/#num_gate_tiles","title":"num_gate_tiles","text":"<pre><code>int num_gate_tiles = 0;\n</code></pre> <p>Variabel integer yang menyimpan jumlah tile gerbang keluar yang ditemukan dalam level saat ini.</p>"},{"location":"development/modules/entity/#saw_manager","title":"saw_manager","text":"<pre><code>extern SawManager saw_manager;\n</code></pre> <p>Variabel global yang merupakan struct atau pointer ke struct yang mengelola perilaku dan status dari semua gergaji (saws) dalam game. (Definisi <code>SawManager</code> tidak ada dalam file ini).</p>"},{"location":"development/modules/entity/#penjelasan-setiap-fungsi","title":"Penjelasan Setiap Fungsi","text":""},{"location":"development/modules/entity/#create_entity","title":"create_entity","text":"entity.h<pre><code>Entity *create_entity(Transform transform, Physics physics, EntityRenderComponent render);\n</code></pre> <p>Fungsi <code>create_entity</code> mengalokasikan memori untuk sebuah <code>Entity</code> dan menginisialisasi komponen <code>transform</code>, <code>physics</code>, dan <code>render</code> dengan nilai yang diberikan. Fungsi ini menerima struct <code>Transform</code>, <code>Physics</code>, dan <code>EntityRenderComponent</code> sebagai input dan mengembalikan pointer ke <code>Entity</code> yang baru dibuat.</p> entity.c<pre><code>#include &lt;stdlib.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;math.h&gt;\n#include \"entity.h\"\n#include \"player.h\"\n#include \"level.h\"\n#include \"vector.h\"\n#include \"obstacles.h\"\n#include \"SFX.h\"\n#include \"ui.h\"\n\n// ... (definisi array solid_tiles, destruct_tiles, gate_tiles)\n\nEntity *create_entity(Transform transform, Physics physics, EntityRenderComponent render)\n{\n    Entity *e = (Entity *)malloc(sizeof(Entity));\n\n    e-&gt;transform = transform;\n    e-&gt;physics = physics;\n    e-&gt;render = render;\n\n    return e;\n}\n</code></pre>"},{"location":"development/modules/entity/#update_entity","title":"update_entity","text":"entity.h<pre><code>void update_entity(Entity *entity, float delta_time, Entity *objects, int object_count);\n</code></pre> <p>Fungsi <code>update_entity</code> memperbarui status sebuah entity setiap frame. Fungsi ini menerima pointer ke <code>Entity</code>, <code>delta_time</code> (waktu yang berlalu sejak frame terakhir), array pointer ke entity lain (<code>objects</code>), dan jumlah objek dalam array. Di dalam fungsi ini, gravitasi diterapkan pada entity dan kemudian fungsi <code>apply_entity_movement</code> dipanggil untuk menangani pergerakan dan tabrakan.</p> entity.c<pre><code>void update_entity(Entity *entity, float delta_time, Entity *objects, int object_count)\n{\n  // gravitasi\n  apply_gravity(&amp;entity-&gt;physics, delta_time);\n\n  apply_entity_movement(entity, delta_time, objects, object_count);\n}\n</code></pre>"},{"location":"development/modules/entity/#apply_entity_movement","title":"apply_entity_movement","text":"entity.h<pre><code>void apply_entity_movement(Entity *entity, float delta_time, Entity *objects, int object_count);\n</code></pre> <p>Fungsi <code>apply_entity_movement</code> mengimplementasikan logika pergerakan entity. Fungsi ini menerima pointer ke <code>Entity</code>, <code>delta_time</code>, array pointer ke entity lain (<code>objects</code>), dan jumlah objek dalam array. Fungsi ini memperbarui posisi entity berdasarkan kecepatan horizontal dan vertikalnya, serta menangani deteksi dan respons terhadap tabrakan dengan objek lain (tile-tile solid).</p>"},{"location":"development/modules/entity/#destroy_entity","title":"destroy_entity","text":"entity.h<pre><code>void destroy_entity(Entity *entity);\n</code></pre> <p>Fungsi <code>destroy_entity</code> membebaskan memori yang dialokasikan untuk sebuah <code>Entity</code>. Fungsi ini menerima pointer ke <code>Entity</code> yang akan dihancurkan.</p>"},{"location":"development/modules/entity/#is_solid","title":"is_solid","text":"entity.h<pre><code>bool is_solid(Transform *transform);\n</code></pre> <p>Fungsi <code>is_solid</code> memeriksa apakah tile pada posisi yang diberikan (melalui <code>Transform</code>) termasuk dalam kategori tile solid berdasarkan array <code>solid_tiles</code>. Fungsi ini mengakses peta level (<code>current_level_map</code>) dan membandingkan tipe tile dengan daftar tile solid.</p>"},{"location":"development/modules/entity/#is_void","title":"is_void","text":"entity.h<pre><code>bool is_void(Transform *transform);\n</code></pre> <p>Fungsi <code>is_void</code> memeriksa apakah tile pada posisi yang diberikan adalah tile kosong (<code>EMPTY</code>).</p>"},{"location":"development/modules/entity/#is_exit","title":"is_exit","text":"entity.h<pre><code>bool is_exit(Transform *transform);\n</code></pre> <p>Fungsi <code>is_exit</code> memeriksa apakah tile pada posisi yang diberikan adalah tile gerbang keluar (<code>EXIT_GATE</code>).</p>"},{"location":"development/modules/entity/#is_coin","title":"is_coin","text":"entity.h<pre><code>bool is_coin(Transform *transform);\n</code></pre> <p>Fungsi <code>is_coin</code> memeriksa apakah tile pada posisi yang diberikan adalah tile koin (<code>COINS</code>). Jika iya, fungsi ini juga akan mengganti tile tersebut menjadi kosong (<code>EMPTY</code>) pada peta level dan memainkan efek suara koin.</p>"},{"location":"development/modules/entity/#is_destruct","title":"is_destruct","text":"entity.h<pre><code>bool is_destruct(Transform *transform);\n</code></pre> <p>Fungsi <code>is_destruct</code> memeriksa apakah tile pada posisi yang diberikan termasuk dalam kategori tile yang dapat dihancurkan berdasarkan array <code>destruct_tiles</code>. Jika iya, fungsi ini akan mengganti tile tersebut menjadi kosong (<code>EMPTY</code>) pada peta level.</p>"},{"location":"development/modules/entity/#is_button","title":"is_button","text":"entity.h<pre><code>bool is_button(Transform *transform, Vector button);\n</code></pre> <p>Fungsi <code>is_button</code> memeriksa apakah tile pada posisi yang diberikan adalah tile tombol (<code>BUTTON</code>) dan sesuai dengan posisi tombol yang diberikan (<code>Vector button</code>).</p>"},{"location":"development/modules/entity/#interaction_buttons_switch","title":"interaction_buttons_switch","text":"entity.h<pre><code>void interaction_buttons_switch(Entity *player, Switch button);\n</code></pre> <p>Fungsi <code>interaction_buttons_switch</code> menangani interaksi antara pemain dan tombol jenis switch. Jika pemain berada di atas tombol dan tombol belum aktif (<code>is_on</code> adalah false), fungsi ini akan mengaktifkan tombol (<code>is_on</code> menjadi true) dan mengubah tile switch pada peta level menjadi kosong (<code>EMPTY</code>).</p>"},{"location":"development/modules/entity/#interaction_buttons_obstacles","title":"interaction_buttons_obstacles","text":"entity.h<pre><code>void interaction_buttons_obstacles(Entity *player, Switch_Obstacles button);\n</code></pre> <p>Fungsi <code>interaction_buttons_obstacles</code> menangani interaksi antara pemain dan tombol yang mengaktifkan/menonaktifkan rintangan. Jika pemain berada di atas tombol dan tombol belum aktif, fungsi ini akan mengaktifkan tombol dan mengubah tile rintangan pada peta level menjadi tile rintangan solid (<code>SOLID_OBSTACLE</code>).</p>"},{"location":"development/modules/entity/#has_coin_tiles","title":"has_coin_tiles","text":"entity.h<pre><code>bool has_coin_tiles();\n</code></pre> <p>Fungsi <code>has_coin_tiles</code> memeriksa apakah ada tile koin (<code>COINS</code>) yang tersisa di peta level saat ini. Fungsi ini melakukan iterasi melalui <code>current_level_map</code> dan mengembalikan <code>true</code> jika menemukan tile koin, dan <code>false</code> jika tidak</p>"},{"location":"development/modules/entity/#find_gate_tiles","title":"find_gate_tiles","text":"entity.h<pre><code>void find_gate_tiles();\n</code></pre> <p>Fungsi <code>find_gate_tiles</code> mencari semua tile gerbang keluar (<code>EXIT_GATE</code>) dalam peta level saat ini dan menyimpan posisinya dalam array <code>gate_tiles</code>. Fungsi ini juga mengupdate nilai <code>num_gate_tiles</code>.</p>"},{"location":"development/modules/entity/#interaksi-dengan-modul-lain","title":"Interaksi dengan modul lain","text":"<p>Modul <code>entity</code> berinteraksi dengan modul lain sebagai berikut:</p> <ul> <li>Modul <code>physics</code>: Modul <code>entity</code> menggunakan struct <code>Physics</code> sebagai salah satu komponennya. Fungsi <code>update_entity</code> memanggil fungsi <code>apply_gravity</code> dari modul <code>physics</code>. Fungsi-fungsi deteksi tabrakan (<code>check_collision</code>) dari modul <code>physics</code> juga digunakan dalam <code>apply_entity_movement</code>.</li> <li>Modul <code>transform</code>: Modul <code>entity</code> menggunakan struct <code>Transform</code> sebagai komponen untuk menyimpan posisi dan ukuran entity.</li> <li>Modul <code>game_stat</code>: Modul <code>entity</code> berinteraksi dengan <code>game_stat</code> melalui fungsi <code>is_coin</code> yang akan menambah skor pemain (walaupun implementasinya tidak terlihat eksplisit di sini).</li> <li>Modul <code>obstacles</code>: Modul <code>entity</code> berinteraksi dengan <code>obstacles</code> melalui konstanta tile seperti <code>SAWS</code> dan melalui fungsi-fungsi spesifik untuk menangani interaksi dengan objek-objek level (walaupun detailnya tidak sepenuhnya terlihat).</li> <li>Modul <code>player</code>: Modul <code>entity</code> merepresentasikan semua objek dalam game, termasuk pemain. Fungsi-fungsi seperti <code>interaction_buttons_switch</code> dan <code>interaction_buttons_obstacles</code> secara spesifik menangani interaksi pemain dengan elemen level.</li> <li>Modul <code>level</code>: Modul <code>entity</code> sangat bergantung pada modul <code>level</code>. Fungsi-fungsi seperti <code>is_solid</code>, <code>is_void</code>, <code>is_exit</code>, <code>is_coin</code>, <code>is_destruct</code>, dan fungsi-fungsi interaksi tombol mengakses dan memodifikasi <code>current_level_map</code> dari modul <code>level</code>. Konstanta seperti <code>TILE_SIZE</code>, <code>MAP_WIDTH</code>, dan <code>MAP_HEIGHT</code> juga didefinisikan atau digunakan dari modul <code>level</code>.</li> <li>Modul <code>vector</code>: Modul <code>entity</code> menggunakan struct <code>Vector</code> untuk merepresentasikan posisi tile, terutama untuk <code>gate_tiles</code> dan dalam fungsi-fungsi interaksi tombol.</li> <li>Modul <code>sfx</code>: Fungsi <code>is_coin</code> memanggil <code>play_sound</code> dari modul <code>sfx</code> untuk memainkan efek suara saat koin dikumpulkan.</li> <li>Modul <code>ui</code>: Modul <code>ui</code> akan berinteraksi dengan modul <code>entity</code> untuk mendapatkan informasi tentang posisi dan tampilan entity (melalui komponen <code>transform</code> dan <code>render</code>) untuk keperluan rendering.</li> </ul>"},{"location":"development/modules/game/","title":"Modul <code>game</code>","text":"<p>Pembuat: Ikhsan Satriadi (241511080)</p> <p>File: <code>game.c</code> &amp; <code>game.h</code></p>"},{"location":"development/modules/game/#struktur-game","title":"Struktur <code>Game</code>","text":"game.h<pre><code>typedef struct\n{\n  SDL_Window *window;\n  SDL_Renderer *renderer;\n  bool is_physics_paused;\n} Game;\n</code></pre> <p>Struktur <code>Game</code> menyimpan pointer ke window dan renderer SDL yang digunakan untuk menampilkan grafis game.</p>"},{"location":"development/modules/game/#variabel-dan-konstanta","title":"Variabel dan Konstanta","text":""},{"location":"development/modules/game/#game","title":"game","text":"game.c<pre><code>static Game game;\n</code></pre> <p>Variabel global <code>game</code> adalah instance dari game, yang mencakup pembuatan window dan renderer SDL. Variabel ini dibuat menggunakan <code>static</code> untuk memastikan bahwa variabel hanya dapat di-initialize satu kali saja.</p>"},{"location":"development/modules/game/#penjelasan-setiap-fungsi","title":"Penjelasan Setiap Fungsi","text":""},{"location":"development/modules/game/#initialize","title":"initialize()","text":"game.h<pre><code>void initialize(const char *appname, const char *appversion, const char *appidentifier);\n</code></pre> <p>Fungsi <code>initialize</code> digunakan untuk melakukan inisialisasi awal aplikasi game. Fungsi ini menerima tiga parameter string: <code>appname</code> (nama aplikasi), <code>appversion</code> (versi aplikasi), dan <code>appidentifier</code> (identifier unik aplikasi). Fungsi ini akan mengatur metadata aplikasi menggunakan <code>SDL_SetAppMetadata</code> dan menginisialisasi sistem SDL menggunakan <code>SDL_Init</code> dengan flag <code>SDL_INIT_VIDEO</code> untuk mengaktifkan subsistem video. Jika inisialisasi SDL gagal, fungsi akan mencetak pesan error ke log dan keluar dari program.</p> game.c<pre><code>void initialize(const char *appname, const char *appversion, const char *appidentifier)\n{\n  SDL_SetAppMetadata(appname, appversion, appidentifier);\n\n  if (!SDL_Init(SDL_INIT_VIDEO))\n  {\n    SDL_Log(\"Couldn't initialize SDL: %s\", SDL_GetError());\n    exit(2);\n  }\n}\n</code></pre>"},{"location":"development/modules/game/#create_game_instance","title":"create_game_instance()","text":"game.h<pre><code>void create_game_instance(const char *title, int width, int height);\n</code></pre> <p>Fungsi <code>create_game_instance</code> bertanggung jawab untuk membuat instance dari game, yang mencakup pembuatan window dan renderer SDL. Fungsi ini menerima tiga parameter: <code>title</code> (judul window), <code>width</code> (lebar window), dan <code>height</code> (tinggi window). Window dibuat menggunakan <code>SDL_CreateWindow</code> dengan flag <code>SDL_WINDOW_OPENGL</code>, dan renderer dibuat untuk window tersebut menggunakan <code>SDL_CreateRenderer</code>. Instance <code>Game</code> disimpan dalam variabel statis global <code>game</code>.</p> game.c<pre><code>void create_game_instance(const char *title, int width, int height)\n{\n  game.window = SDL_CreateWindow(title, width, height, SDL_WINDOW_OPENGL);\n  game.renderer = SDL_CreateRenderer(game.window, NULL);\n}\n</code></pre>"},{"location":"development/modules/game/#get_game_instance","title":"get_game_instance()","text":"game.h<pre><code>Game *get_game_instance();\n</code></pre> <p>Fungsi <code>get_game_instance</code> digunakan untuk mendapatkan pointer ke instance <code>Game</code> yang telah dibuat. Fungsi ini tidak menerima parameter dan mengembalikan pointer ke struct <code>Game</code>. Sebelum memanggil fungsi ini, <code>create_game_instance()</code> harus dipanggil terlebih dahulu. Jika <code>create_game_instance()</code> belum pernah dipanggil (yaitu, <code>game.window</code> masih NULL), fungsi akan mencetak pesan log.</p> game.c<pre><code>Game *get_game_instance()\n{\n  if (!game.window)\n  {\n    SDL_Log(\"Game instance has not been initialized!, call `create_game_instance` first.\");\n  }\n  return &amp;game;\n}\n</code></pre>"},{"location":"development/modules/game/#skip_physics_frame","title":"skip_physics_frame()","text":"game.h<pre><code>void skip_physics_frame();\n</code></pre> <p>Fungsi <code>skip_physics_frame</code> digunakan untuk membekukan frame dari pemrosesan fisika dengan mengatur <code>delta_time</code> ke 0. Fungsi ini akan mengubah <code>is_physics_paused</code> dari <code>game</code> ke <code>true</code>.</p>"},{"location":"development/modules/game/#resume_physics","title":"resume_physics()","text":"game.h<pre><code>void resume_physics();\n</code></pre> <p>Fungsi <code>resume_physics</code> digunakan untuk mengaktifkan pemrosesan fisika. Fungsi ini akan mengubah <code>is_physics_paused</code> dari <code>game</code> ke <code>false</code>.</p>"},{"location":"development/modules/game/#interaksi-dengan-modul-lain","title":"Interaksi dengan modul lain","text":"<ul> <li> <p>Inisialisasi Window dan Renderer</p> <p>Fungsi-fungsi yang didefinisikan dalam modul <code>game</code> ini (yaitu <code>initialize()</code>, <code>create_game_instance()</code>, dan <code>get_game_instance()</code>) dipanggil dari <code>main.c</code> (main program) untuk melakukan inisialisasi SDL, membuat window dan renderer game untuk digunakan di bagian lain program, contohnya digunakan di fungsi render dari <code>game_state</code></p> main.c<pre><code>  Game *game = get_game_instance();\n  SDL_Renderer *renderer = game-&gt;renderer;\n\n  GameState *current_state = get_current_game_state();\n\n  current_state-&gt;update(delta_time);\n  current_state-&gt;render(renderer);\n</code></pre> </li> <li> <p>Mengatur Physics</p> <p>Fungsi <code>skip_physics_frame()</code> dan <code>resume_physics()</code> dipanggil untuk membekukan frame dari pemrosesan fisika dan mengaktifkan pemrosesan fisika. Digunakan ketika pause, game over dan kondisi lain yang memerlukan pemrosesan fisika dijeda.</p> main.c<pre><code>if (game-&gt;is_physics_paused)\n{\n  delta_time = 0.0f;\n  resume_physics();\n}\nelse\n{\n  delta_time = ((current_time - last_time) * 1000 / (double)SDL_GetPerformanceFrequency());\n}\n</code></pre> </li> </ul>"},{"location":"development/modules/game_stat/","title":"Modul <code>game_stat</code>","text":"<p>Pembuat: Hanifidin Ibrahim (241511076)</p> <p>File: <code>game_stat.c</code> &amp; <code>game_stat.h</code></p>"},{"location":"development/modules/game_stat/#struktur-gamestat","title":"Struktur <code>GameStat</code>","text":"game_stat.h<pre><code>typedef struct {\n    int score;   // Skor pemain\n    int lives;   // Jumlah nyawa pemain\n    Uint32 start_time;\n    Uint32 stop_time;\n    Uint32 elapsed_time;\n    Uint32 last_hit_time;\n} GameStat;\n</code></pre> <p>Struktur <code>GameStat</code> menyimpan informasi statistik permainan, termasuk:</p> <ul> <li><code>score</code>: Skor pemain saat ini.</li> <li><code>lives</code>: Jumlah nyawa pemain yang tersisa.</li> <li><code>start_time</code>: Waktu (dalam milisekon) saat timer permainan dimulai.</li> <li><code>stop_time</code>: Waktu (dalam milisekon) saat timer permainan dihentikan.</li> <li><code>elapsed_time</code>: Durasi waktu permainan yang telah berlalu (dalam milisekon).</li> <li><code>last_hit_time</code>: Waktu (dalam milisekon) saat pemain terakhir kali terkena serangan.</li> </ul>"},{"location":"development/modules/game_stat/#variabel-dan-konstanta","title":"Variabel dan Konstanta","text":""},{"location":"development/modules/game_stat/#default_lives","title":"DEFAULT_LIVES","text":"<pre><code>#define DEFAULT_LIVES 3  // Jumlah nyawa awal\n</code></pre> <p>Konstanta yang mendefinisikan jumlah nyawa awal pemain saat permainan dimulai.</p>"},{"location":"development/modules/game_stat/#game_stat","title":"game_stat","text":"<pre><code>extern GameStat game_stat; // Variabel global untuk status game\n</code></pre> <p>Variabel global <code>game_stat</code> adalah instance dari struktur <code>GameStat</code> yang menyimpan status permainan saat ini. Variabel ini dapat diakses dan dimodifikasi oleh modul-modul lain dalam game.</p>"},{"location":"development/modules/game_stat/#score_per_coin","title":"SCORE_PER_COIN","text":"<pre><code>#define SCORE_PER_COIN 10\n</code></pre> <p>Konstanta yang mendefinisikan jumlah skor yang ditambahkan ke <code>game_stat.score</code> setiap kali pemain mengumpulkan koin.</p>"},{"location":"development/modules/game_stat/#penjelasan-setiap-fungsi","title":"Penjelasan Setiap Fungsi","text":""},{"location":"development/modules/game_stat/#init_game_stat","title":"init_game_stat","text":"game_stat.h<pre><code>void init_game_stat(GameStat *stat);\n</code></pre> <p>Fungsi <code>init_game_stat</code> digunakan untuk menginisialisasi struktur <code>GameStat</code> dengan nilai-nilai awal saat permainan dimulai atau direset. Fungsi ini menerima pointer ke struktur <code>GameStat</code> sebagai input dan mengatur <code>score</code> menjadi 0, <code>lives</code> menjadi nilai <code>DEFAULT_LIVES</code>, dan mengatur nilai awal untuk variabel waktu.</p> game_stat.c<pre><code>// Inisialisasi GameStat dengan jumlah nyawa awal dan waktu maksimal per level\nvoid init_game_stat(GameStat *stat)\n{\n    stat-&gt;score = 0;             // score mulai dari 0\n    stat-&gt;lives = DEFAULT_LIVES; // default nyawa (3)\n    stat-&gt;start_time = 0;        // Timer juga\n    stat-&gt;stop_time = 0;\n    stat-&gt;elapsed_time = 0;\n}\n</code></pre>"},{"location":"development/modules/game_stat/#start_timer","title":"start_timer","text":"game_stat.h<pre><code>void start_timer(GameStat *stat);\n</code></pre> <p>Fungsi <code>start_timer</code> memulai atau mereset timer permainan dengan mencatat waktu saat ini menggunakan <code>SDL_GetTicks()</code> ke dalam variabel <code>start_time</code> pada struktur <code>GameStat</code>.</p> game_stat.c<pre><code>// Memulai atau mereset timer permainan\nvoid start_timer(GameStat *stat)\n{\n    stat-&gt;start_time = SDL_GetTicks();\n}\n</code></pre>"},{"location":"development/modules/game_stat/#get_elapsed_time","title":"get_elapsed_time","text":"game_stat.h<pre><code>Uint32 get_elapsed_time(GameStat *stat);\n</code></pre> <p>Fungsi <code>get_elapsed_time</code> menghitung dan mengembalikan waktu yang telah berlalu sejak timer dimulai. Fungsi ini menghitung selisih antara waktu saat ini (<code>SDL_GetTicks()</code>) dan waktu mulai (<code>stat-&gt;start_time</code>).</p> game_stat.c<pre><code>Uint32 get_elapsed_time(GameStat *stat)\n{\n    return SDL_GetTicks() - stat-&gt;start_time;\n}\n</code></pre>"},{"location":"development/modules/game_stat/#stop_timer","title":"stop_timer","text":"game_stat.h<pre><code>void stop_timer(GameStat *stat);\n</code></pre> <p>Fungsi <code>stop_timer</code> menghentikan timer permainan dengan mencatat waktu saat ini ke dalam variabel <code>stop_time</code> dan kemudian menghitung waktu yang telah berlalu menggunakan <code>get_elapsed_time</code>.</p> game_stat.c<pre><code>// Pause timer\nvoid stop_timer(GameStat *stat)\n{\n    stat-&gt;stop_time = SDL_GetTicks();\n    stat-&gt;elapsed_time = get_elapsed_time(stat);\n}\n</code></pre>"},{"location":"development/modules/game_stat/#add_score","title":"add_score","text":"game_stat.h<pre><code>void add_score(GameStat *stat);\n</code></pre> <p>Fungsi <code>add_score</code> menambahkan sejumlah poin ke skor pemain. Jumlah poin yang ditambahkan ditentukan oleh konstanta <code>SCORE_PER_COIN</code>.</p> game_stat.c<pre><code>// Menambah skor berdasarkan multiplier\nvoid add_score(GameStat *stat)\n{\n    stat-&gt;score += SCORE_PER_COIN;\n}\n</code></pre>"},{"location":"development/modules/game_stat/#reset_score","title":"reset_score","text":"game_stat.h<pre><code>void reset_score(GameStat *stat);\n</code></pre> <p>Fungsi <code>reset_score</code> mengatur kembali skor pemain menjadi nol.</p> game_stat.c<pre><code>// Mereset skor ke nol\nvoid reset_score(GameStat *stat)\n{\n    stat-&gt;score = 0;\n}\n</code></pre>"},{"location":"development/modules/game_stat/#add_life","title":"add_life","text":"game_stat.h<pre><code>void add_life(GameStat *stat);\n</code></pre> <p>Fungsi <code>add_life</code> menambahkan satu nyawa ke jumlah nyawa pemain saat ini, dengan batasan maksimum yang ditentukan oleh <code>DEFAULT_LIVES</code>.</p> game_stat.c<pre><code>// Menambah satu nyawa (dengan batas maksimum)\nvoid add_life(GameStat *stat)\n{\n    if (stat-&gt;lives &lt; DEFAULT_LIVES)\n    {\n        stat-&gt;lives++;\n    }\n}\n</code></pre>"},{"location":"development/modules/game_stat/#sub_life","title":"sub_life","text":"game_stat.h<pre><code>bool sub_life(GameStat *stat);\n</code></pre> <p>Fungsi <code>sub_life</code> mengurangi satu nyawa dari jumlah nyawa pemain. Fungsi ini juga memeriksa apakah nyawa pemain telah habis. Jika nyawa menjadi nol, fungsi ini mengembalikan <code>false</code> (menandakan game over), jika tidak, mengembalikan <code>true</code>. Fungsi ini juga mencatat waktu terakhir kali pemain kehilangan nyawa untuk keperluan cooldown atau invincibility.</p> game_stat.c<pre><code>// Mengurangi satu nyawa dan mengecek game over\nbool sub_life(GameStat *stat)\n{\n    Uint32 now = SDL_GetTicks();\n\n    if (stat-&gt;lives &gt; 0 &amp;&amp; (now - stat-&gt;last_hit_time) &gt; 1000)\n    {\n        stat-&gt;lives--;\n        stat-&gt;last_hit_time = now;\n        return stat-&gt;lives &gt; 0;\n    }\n    return true;\n}\n</code></pre>"},{"location":"development/modules/game_stat/#interaksi-dengan-modul-lain","title":"Interaksi dengan modul lain","text":"<p>Modul <code>game_stat</code> berinteraksi dengan modul lain sebagai berikut:</p> <ul> <li>Modul <code>entity</code> / <code>player</code>: Modul <code>entity</code> akan berinteraksi dengan <code>game_stat</code> untuk:<ul> <li>Mengurangi nyawa pemain menggunakan fungsi <code>sub_life</code> ketika pemain berada pada kondisi tertentu (misalnya, masuk ke void).</li> <li>Menambah skor pemain menggunakan fungsi <code>add_score</code> ketika pemain mengumpulkan item koin.</li> <li>Mendapatkan informasi tentang jumlah nyawa pemain saat ini untuk keperluan game over.</li> </ul> </li> <li>Modul <code>ui</code>: Modul <code>ui</code> menggunakan informasi dari struktur <code>GameStat</code> (melalui variabel global <code>game_stat</code>) untuk menampilkan status permainan kepada pemain. Ini termasuk:<ul> <li>Menampilkan skor pemain saat ini menggunakan <code>game_stat.score</code> dalam UI game.</li> <li>Menampilkan jumlah nyawa pemain saat ini menggunakan <code>game_stat.lives</code> dalam UI game.</li> <li>Menampilkan skor akhir dan statistik lainnya pada layar \"Game Over\" dan \"Congratulations\" menggunakan data dari <code>game_stat</code>.</li> </ul> </li> </ul>"},{"location":"development/modules/game_state/","title":"Modul <code>game_state</code>","text":"<p>Pembuat: Ikhsan Satriadi (241511080)</p> <p>File: <code>game_state.h</code> &amp; <code>game_state.c</code></p>"},{"location":"development/modules/game_state/#struktur-gamestate","title":"Struktur <code>GameState</code>","text":"game_state.h<pre><code>typedef struct GameState\n{\n  void (*init)();\n  void (*handle_input)(SDL_Event *);\n  void (*update)(double delta_time);\n  void (*render)(SDL_Renderer *);\n  void (*cleanup)();\n} GameState;\n</code></pre> <p>Struktur <code>GameState</code> mendefinisikan blueprint untuk berbagai state dalam game. Setiap state diimplementasikan sebagai sekumpulan fungsi yang menangani inisialisasi, input, pembaruan logika, rendering, dan pembersihan.:</p> <ul> <li><code>init</code>: Fungsi untuk melakukan inisialisasi state.</li> <li><code>handle_input</code>: Fungsi untuk menangani input dari pengguna.</li> <li><code>update</code>: Fungsi untuk memperbarui logika game dengan parameter <code>delta_time</code> (waktu berlalu sejak frame terakhir).</li> <li><code>render</code>: Fungsi untuk menggambar elemen-elemen game ke layar menggunakan <code>SDL_Renderer</code>.</li> <li><code>cleanup</code>: Fungsi untuk membersihkan resource yang digunakan oleh state sebelum state diubah.</li> </ul>"},{"location":"development/modules/game_state/#variabel-dan-konstanta","title":"Variabel dan Konstanta","text":""},{"location":"development/modules/game_state/#current_state","title":"current_state","text":"game_state.h<pre><code>GameState *current_state;\n</code></pre> <p>Variabel global <code>current_state</code> adalah pointer yang menunjuk ke state game yang sedang aktif. Variabel ini diubah menggunakan fungsi <code>change_game_state</code>.</p>"},{"location":"development/modules/game_state/#penjelasan-setiap-fungsi","title":"Penjelasan Setiap Fungsi","text":""},{"location":"development/modules/game_state/#change_game_state","title":"change_game_state","text":"game_state.h<pre><code>void change_game_state(GameState *new_state);\n</code></pre> <p>Fungsi <code>change_game_state</code> digunakan untuk mengubah state game saat ini. Fungsi ini menerima satu parameter: <code>new_state</code>, yang merupakan pointer ke struct <code>GameState</code> yang ingin diaktifkan. Ketika state baru diubah, fungsi ini akan melakukan langkah-langkah berikut:</p> <ol> <li>Jika ada state saat ini (<code>current_state</code> tidak NULL), fungsi <code>cleanup</code> dari state saat ini akan dipanggil untuk membersihkan sumber daya yang mungkin digunakan.</li> <li>Pointer <code>current_state</code> akan diubah untuk menunjuk ke <code>new_state</code>.</li> <li>Fungsi <code>init</code> dari <code>new_state</code> akan dipanggil untuk melakukan inisialisasi state yang baru.</li> </ol> game_state.c<pre><code>void change_game_state(GameState *new_state)\n{\n  if (current_state)\n  {\n    current_state-&gt;cleanup(); // clean up previous state\n  }\n  current_state = new_state;\n  current_state-&gt;init(); // initialize new state\n}\n</code></pre>"},{"location":"development/modules/game_state/#get_current_game_state","title":"get_current_game_state","text":"game_state.h<pre><code>GameState *get_current_game_state();\n</code></pre> <p>Fungsi <code>get_current_game_state</code> digunakan untuk mendapatkan pointer ke state game yang sedang aktif saat ini (<code>current_state</code>). Fungsi ini tidak menerima parameter dan mengembalikan pointer ke struct <code>GameState</code>. Sebelum memanggil fungsi ini, <code>change_game_state()</code> harus dipanggil setidaknya sekali untuk menginisialisasi <code>current_state</code>. Jika <code>current_state</code> belum diinisialisasi (masih NULL), fungsi akan mencetak pesan error ke log dan keluar dari program.</p> game_state.c<pre><code>GameState *get_current_game_state()\n{\n  if (!current_state)\n  {\n    SDL_Log(\"`current_state` has not been initialized!, call `change_game_state` first.\");\n    exit(1);\n  }\n\n  return current_state;\n}\n</code></pre>"},{"location":"development/modules/game_state/#interaksi-dengan-modul-lain","title":"Interaksi dengan modul lain","text":"<p>Modul <code>game_state</code> ini memiliki interaksi dengan modul lain sebagai berikut:</p> <ul> <li> <p>Implementasi State</p> <p>Struktur <code>GameState</code> diimplementasikan secara konkret dalam modul-modul state spesifik seperti <code>menu_state</code>, <code>stage0_state</code>, dan <code>leaderboard_state</code>. Setiap modul ini akan mendefinisikan fungsi <code>init</code>, <code>handle_input</code>, <code>update</code>, <code>render</code>, dan <code>cleanup</code> sesuai dengan logika state masing-masing.</p> </li> <li> <p>Pemanggilan <code>change_game_state</code></p> <p>Fungsi <code>change_game_state</code> dipanggil di <code>main.c</code> untuk mengatur state awal game (<code>menu_state</code>). Selain itu, fungsi ini juga dipanggil di dalam implementasi setiap state (<code>menu_state</code>, <code>stage0_state</code>, <code>leaderboard_state</code>) untuk melakukan transisi antar state berdasarkan kondisi tertentu dalam game.</p> main.c<pre><code>change_game_state(&amp;menu_state);\n</code></pre> </li> <li> <p>Pemanggilan <code>get_current_game_state()</code></p> <p>Di dalam game loop pada <code>main.c</code>, fungsi <code>get_current_game_state()</code> dipanggil untuk mendapatkan pointer ke state game yang sedang aktif (<code>current_state</code>). Pointer ini kemudian digunakan untuk memanggil fungsi-fungsi penting dari state saat ini, yaitu <code>update(delta_time)</code> untuk memperbarui logika game, <code>render(renderer)</code> untuk menggambar frame saat ini, dan <code>handle_input(event)</code> untuk memproses input dari pengguna.</p> main.c<pre><code>GameState *current_state = get_current_game_state();\ncurrent_state-&gt;update(delta_time);\ncurrent_state-&gt;render(renderer);\n</code></pre> </li> </ul>"},{"location":"development/modules/leaderboard/","title":"Modul <code>leaderboard</code>","text":"<p>Pembuat: Hanifidin Ibrahim (241511076)</p> <p>File: <code>leaderboard.h</code> &amp; <code>leaderboard.c</code></p>"},{"location":"development/modules/leaderboard/#struktur-leaderboardnode","title":"Struktur <code>LeaderboardNode</code>","text":"leaderboard.h<pre><code>typedef struct LeaderboardNode {\n    GameStat stat;\n    struct LeaderboardNode* next;\n} LeaderboardNode;\n</code></pre> <p>Struktur <code>LeaderboardNode</code> merepresentasikan sebuah entri dalam leaderboard, berfungsi sebagai node dalam sebuah linked list. Setiap node menyimpan statistik permainan (<code>GameStat</code>) dan sebuah pointer ke node berikutnya dalam daftar.</p> <ul> <li><code>stat</code>: Berisi statistik permainan untuk entri leaderboard tertentu (misalnya, skor dan waktu yang berlalu).</li> <li><code>next</code>: Pointer ke <code>LeaderboardNode</code> berikutnya dalam linked list, atau <code>NULL</code> jika ini adalah node terakhir.</li> </ul>"},{"location":"development/modules/leaderboard/#variabel-dan-konstanta","title":"Variabel dan Konstanta","text":""},{"location":"development/modules/leaderboard/#max_leaderboard","title":"MAX_LEADERBOARD","text":"leaderboard.h<pre><code>#define MAX_LEADERBOARD 10\n</code></pre> <p>Konstanta <code>MAX_LEADERBOARD</code> mendefinisikan jumlah maksimum entri yang akan disimpan dalam leaderboard. Dalam kasus ini, leaderboard akan menyimpan hingga 10 entri skor tertinggi.</p>"},{"location":"development/modules/leaderboard/#leaderboard_head","title":"leaderboard_head","text":"leaderboard.h<pre><code>extern LeaderboardNode* leaderboard_head;\n</code></pre> leaderboard.c<pre><code>LeaderboardNode *leaderboard_head = NULL;\n</code></pre> <p>Variabel global <code>leaderboard_head</code> adalah pointer yang menunjuk ke node pertama (head) dari linked list leaderboard. Variabel ini digunakan untuk mengelola akses ke seluruh data leaderboard. Ini diinisialisasi ke <code>NULL</code> yang menunjukkan leaderboard kosong pada awalnya.</p>"},{"location":"development/modules/leaderboard/#penjelasan-setiap-fungsi","title":"Penjelasan Setiap Fungsi","text":""},{"location":"development/modules/leaderboard/#create_node","title":"create_node","text":"leaderboard.h<pre><code>LeaderboardNode* create_node(GameStat stat);\n</code></pre> leaderboard.c<pre><code>LeaderboardNode* create_node(GameStat stat) {\n    LeaderboardNode* new_node = (LeaderboardNode*)malloc(sizeof(LeaderboardNode));\n    if (!new_node) return NULL;\n    new_node-&gt;stat = stat;\n    new_node-&gt;next = NULL;\n    return new_node;\n}\n</code></pre> <p>Fungsi <code>create_node</code> membuat dan menginisialisasi node <code>LeaderboardNode</code> baru. Fungsi ini menerima satu parameter <code>stat</code> (tipe <code>GameStat</code>) yang akan disimpan dalam node baru. Fungsi ini mengalokasikan memori untuk node baru, menetapkan statistik permainan yang diberikan, dan mengatur pointer <code>next</code> ke <code>NULL</code>. Mengembalikan pointer ke node yang baru dibuat, atau <code>NULL</code> jika alokasi memori gagal.</p>"},{"location":"development/modules/leaderboard/#is_greater","title":"is_greater","text":"leaderboard.h<pre><code>bool is_greater(GameStat a, GameStat b);\n</code></pre> <p>Fungsi <code>is_greater</code> adalah fungsi pembanding yang menentukan apakah satu <code>GameStat</code> lebih unggul dari yang lain untuk tujuan peringkat leaderboard. Fungsi ini menerima dua parameter <code>a</code> dan <code>b</code>, keduanya bertipe <code>GameStat</code>. Prioritas pertama adalah skor yang lebih tinggi. Jika skornya sama, maka waktu yang lebih rendah (elapsed time) dianggap lebih baik. Mengembalikan <code>true</code> jika <code>a</code> lebih unggul dari <code>b</code>, <code>false</code> sebaliknya.</p> leaderboard.c<pre><code>bool is_greater(GameStat a, GameStat b) {\n    return (a.score &gt; b.score) ||\n           (a.score == b.score &amp;&amp; a.elapsed_time &lt; b.elapsed_time);\n}\n</code></pre>"},{"location":"development/modules/leaderboard/#insert_leaderboard","title":"insert_leaderboard","text":"leaderboard.h<pre><code>void insert_leaderboard(LeaderboardNode** head, GameStat stat);\n</code></pre> <p>Fungsi <code>insert_leaderboard</code> menyisipkan entri <code>GameStat</code> baru ke dalam leaderboard yang diurutkan secara menurun berdasarkan skor dan kemudian waktu yang berlalu. Fungsi ini menerima pointer ke pointer head leaderboard (<code>head</code>) dan statistik permainan (<code>stat</code>) yang akan disisipkan. Jika <code>nickname</code> kosong, akan diatur menjadi \"Anonymous\". Fungsi ini juga memastikan bahwa leaderboard tidak melebihi <code>MAX_LEADERBOARD</code> entri dengan menghapus node ke-11 jika ada.</p>"},{"location":"development/modules/leaderboard/#free_leaderboard","title":"free_leaderboard","text":"leaderboard.h<pre><code>void free_leaderboard(LeaderboardNode* head);\n</code></pre> <p>Fungsi <code>free_leaderboard</code> membebaskan semua memori yang dialokasikan untuk node-node dalam linked list leaderboard. Fungsi ini menerima pointer ke head leaderboard (<code>head</code>).</p>"},{"location":"development/modules/leaderboard/#print_leaderboard","title":"print_leaderboard","text":"leaderboard.h<pre><code>void print_leaderboard(const LeaderboardNode* head);\n</code></pre> <p>Fungsi <code>print_leaderboard</code> mencetak isi leaderboard ke konsol. Fungsi ini menerima pointer ke head leaderboard (<code>head</code>). Fungsi ini bersifat opsional dan berguna untuk debugging.</p>"},{"location":"development/modules/leaderboard/#save_leaderboard","title":"save_leaderboard","text":"leaderboard.h<pre><code>void save_leaderboard(const char* filename, LeaderboardNode* head);\n</code></pre> <p>Fungsi <code>save_leaderboard</code> menyimpan data leaderboard ke dalam file biner. Fungsi ini menerima nama file (<code>filename</code>) dan pointer ke head leaderboard (<code>head</code>). Hanya <code>MAX_LEADERBOARD</code> entri pertama yang disimpan.</p>"},{"location":"development/modules/leaderboard/#load_leaderboard","title":"load_leaderboard","text":"leaderboard.h<pre><code>LeaderboardNode* load_leaderboard(const char* filename);\n</code></pre> <p>Fungsi <code>load_leaderboard</code> memuat data leaderboard dari file biner. Fungsi ini menerima nama file (<code>filename</code>). Fungsi ini membaca setiap <code>GameStat</code> dari file dan menyisipkannya ke dalam linked list leaderboard menggunakan <code>insert_leaderboard</code>, sehingga memastikan urutan yang benar. Mengembalikan pointer ke head leaderboard yang dimuat, atau <code>NULL</code> jika file tidak dapat dibuka.</p>"},{"location":"development/modules/leaderboard/#interaksi-dengan-modul-lain","title":"Interaksi dengan modul lain","text":"<p>Modul <code>leaderboard</code> ini memiliki interaksi dengan modul lain sebagai berikut:</p> <ul> <li> <p><code>game_stat.h</code>: Modul <code>leaderboard</code> bergantung pada struktur <code>GameStat</code> yang didefinisikan dalam <code>game_stat.h</code> untuk menyimpan statistik pemain (skor dan waktu).</p> </li> <li> <p><code>leaderboard_state.h</code> dan <code>leaderboard_state.c</code>: Kemungkinan besar, modul <code>leaderboard_state</code> akan menggunakan fungsi-fungsi dari <code>leaderboard.h</code> (seperti <code>load_leaderboard</code>, <code>insert_leaderboard</code>, dan <code>print_leaderboard</code> atau fungsi untuk rendering) untuk menampilkan dan mengelola data leaderboard di dalam state permainan leaderboard.</p> </li> <li> <p><code>main.c</code> (atau modul state game lainnya): Fungsi <code>insert_leaderboard</code> mungkin dipanggil setelah permainan berakhir untuk menyimpan skor pemain ke leaderboard. Fungsi <code>save_leaderboard</code> dan <code>load_leaderboard</code> kemungkinan akan dipanggil pada saat startup dan shutdown game untuk mempertahankan data leaderboard.</p> </li> </ul>"},{"location":"development/modules/leaderboard_state/","title":"Modul <code>leaderboard_state</code>","text":"<p>Pembuat: Helga Athifa Hidayat (241511077)</p> <p>File: <code>leaderboard_state.c</code> &amp; <code>leaderboard_state.h</code></p>"},{"location":"development/modules/leaderboard_state/#variabel-dan-konstanta","title":"Variabel dan Konstanta","text":""},{"location":"development/modules/leaderboard_state/#leaderboard_state","title":"leaderboard_state","text":"<pre><code>GameState leaderboard_state = {\n    .init = leaderboard_init,\n    .handle_input = leaderboard_handle_input,\n    .update = leaderboard_update,\n    .render = leaderboard_render,\n    .cleanup = leaderboard_cleanup,\n};\n</code></pre>"},{"location":"development/modules/leaderboard_state/#penjelasan-setiap-fungsi","title":"Penjelasan Setiap Fungsi","text":""},{"location":"development/modules/leaderboard_state/#leaderboard_init","title":"leaderboard_init","text":"leaderboard_state.h<pre><code>void leaderboard_init();\n</code></pre> <p>Fungsi <code>leaderboard_init</code> dipanggil ketika game memasuki state <code>leaderboard_state</code>. Fungsi ini bertanggung jawab untuk melakukan inisialisasi yang diperlukan untuk stage 0, termasuk:</p>"},{"location":"development/modules/leaderboard_state/#leaderboard_handle_input","title":"leaderboard_handle_input","text":"leaderboard_state.h<pre><code>void leaderboard_handle_input(SDL_Event *event);\n</code></pre> <p>Fungsi <code>leaderboard_handle_input</code> dipanggil setiap kali ada event input dari pengguna saat state <code>leaderboard_state</code> aktif.</p>"},{"location":"development/modules/leaderboard_state/#leaderboard_update-tidak-digunakan","title":"leaderboard_update (tidak digunakan)","text":"leaderboard_state.h<pre><code>void leaderboard_update(double delta_time);\n</code></pre> <p>Fungsi <code>leaderboard_update</code> dipanggil setiap frame untuk memperbarui logika game dalam state <code>leaderboard_state</code>.</p>"},{"location":"development/modules/leaderboard_state/#leaderboard_render","title":"leaderboard_render","text":"leaderboard_state.h<pre><code>void leaderboard_render(SDL_Renderer *renderer);\n</code></pre> <p>Fungsi <code>leaderboard_render</code> dipanggil setiap frame untuk merender tampilan game dalam state <code>leaderboard_state</code>.</p>"},{"location":"development/modules/leaderboard_state/#leaderboard_cleanup","title":"leaderboard_cleanup","text":"leaderboard_state.h<pre><code>void leaderboard_cleanup();\n</code></pre> <p>Fungsi <code>leaderboard_cleanup</code> dipanggil ketika state <code>leaderboard_state</code> akan diakhiri atau diganti dengan state lain. Fungsi ini bertanggung jawab untuk membersihkan sumber daya yang digunakan oleh state ini.</p>"},{"location":"development/modules/leaderboard_state/#interaksi-dengan-modul-lain","title":"Interaksi dengan modul lain","text":"<p>Modul <code>leaderboard_state</code> berinteraksi dengan modul lain sebagai berikut:</p> <ul> <li>Modul <code>ui</code>: Modul <code>leaderboard_state</code> menggunakan fungsi <code>show_leaderboard_ui</code> untuk menampilkan UI leaderboard.</li> <li>Modul <code>menu_state</code>: Modul <code>leaderboard_state</code> dapat diakses dari state menu ketika pengguna memilih opsi leaderboard.</li> </ul>"},{"location":"development/modules/level/","title":"Modul <code>level</code>","text":"<p>Pembuat: Hisyam Khaeru Umam (241511078) &amp; Muhamad Syahid (241511081)</p> <p>File: <code>level.c</code> &amp; <code>level.h</code></p>"},{"location":"development/modules/level/#struktur-levelnode","title":"Struktur <code>LevelNode</code>","text":"<p>Struktur <code>LevelNode</code> menyimpan semua data yang diperlukan untuk mendefinisikan sebuah level dalam game.</p> level.h<pre><code>typedef struct LevelNode LevelNode;\n\nstruct LevelNode\n{\n  char name[32];\n  char prev_name[32]; // name level sebelumnya\n  char next_name[32]; // name level selanjutnya\n\n  Vector player_spawn;\n\n  SDL_Color foreground_color;\n  SDL_Color background_color;\n\n  char bg_image[32];\n  char bg_music[32];\n\n  Switch *switches;\n  Switch_Obstacles *switch_obstacles;\n  Saw *saws;\n\n  int switches_count;\n  int switch_obstacles_count;\n  int saws_count;\n\n  short map[MAP_HEIGHT][MAP_WIDTH];\n\n  LevelNode *prev;\n  LevelNode *next;\n};\n</code></pre>"},{"location":"development/modules/level/#variabel-dan-konstanta","title":"Variabel dan Konstanta","text":""},{"location":"development/modules/level/#tile_size","title":"TILE_SIZE","text":"<pre><code>#define TILE_SIZE 32\n</code></pre> <p>Konstanta yang mendefinisikan ukuran (lebar dan tinggi) setiap tile dalam pixel.</p>"},{"location":"development/modules/level/#map_width","title":"MAP_WIDTH","text":"<pre><code>#define MAP_WIDTH 30\n</code></pre> <p>Konstanta yang mendefinisikan lebar peta level dalam jumlah tile.</p>"},{"location":"development/modules/level/#map_height","title":"MAP_HEIGHT","text":"<pre><code>#define MAP_HEIGHT 20\n</code></pre> <p>Konstanta yang mendefinisikan tinggi peta level dalam jumlah tile.</p>"},{"location":"development/modules/level/#level_head","title":"level_head","text":"<pre><code>extern LevelNode *level_head;\n</code></pre> <p>Pointer ke node level paling depan (head) dari linked list level. Pointer ini tidak boleh berubah selama game berjalan.</p>"},{"location":"development/modules/level/#current_level","title":"current_level","text":"<pre><code>extern LevelNode *current_level;\n</code></pre> <p>Pointer ke node level yang sedang dimuat atau dimainkan saat ini. Pointer ini dapat berubah saat berpindah level.</p>"},{"location":"development/modules/level/#current_switches","title":"current_switches","text":"<pre><code>extern Switch *current_switches;\n</code></pre> <p>Pointer ke array of <code>Switch</code> yang mewakili semua switch di level saat ini.</p>"},{"location":"development/modules/level/#current_switch_obstacles","title":"current_switch_obstacles","text":"<pre><code>extern Switch_Obstacles *current_switch_obstacles;\n</code></pre> <p>Pointer ke array of <code>Switch_Obstacles</code> yang mewakili semua rintangan switch di level saat ini.</p>"},{"location":"development/modules/level/#current_switches_count","title":"current_switches_count","text":"<pre><code>extern int current_switches_count;\n</code></pre> <p>Jumlah switch di level saat ini.</p>"},{"location":"development/modules/level/#current_switch_obstacles_count","title":"current_switch_obstacles_count","text":"<pre><code>extern int current_switch_obstacles_count;\n</code></pre> <p>Jumlah rintangan switch di level saat ini.</p>"},{"location":"development/modules/level/#current_level_map","title":"current_level_map","text":"<pre><code>extern short current_level_map[MAP_HEIGHT][MAP_WIDTH];\n</code></pre> <p>Array 2D yang menyimpan data peta untuk level yang sedang aktif.</p>"},{"location":"development/modules/level/#penjelasan-setiap-fungsi","title":"Penjelasan Setiap Fungsi","text":""},{"location":"development/modules/level/#load_levels","title":"load_levels","text":"level.h<pre><code>void load_levels(const char *dir);\n</code></pre> <p>Fungsi ini memuat semua level dari file JSON di direktori yang ditentukan, membangun linked list level, dan mengatur level pertama sebagai level saat ini.</p>"},{"location":"development/modules/level/#build_level_list_from_array","title":"build_level_list_from_array","text":"level.h<pre><code>void build_level_list_from_array(LevelNode **head, LevelNode *levels[], int count);\n</code></pre> <p>Fungsi ini membangun linked list level dari array <code>LevelNode</code> yang diberikan.</p>"},{"location":"development/modules/level/#goto_level_by_name","title":"goto_level_by_name","text":"level.h<pre><code>void goto_level_by_name(LevelNode *head, const char *name);\n</code></pre> <p>Fungsi ini mengubah <code>current_level</code> ke level yang memiliki nama yang sesuai dengan <code>name</code>.</p>"},{"location":"development/modules/level/#goto_next_level","title":"goto_next_level","text":"level.h<pre><code>void goto_next_level();\n</code></pre> <p>Fungsi ini mengubah <code>current_level</code> ke level berikutnya dalam linked list.</p>"},{"location":"development/modules/level/#goto_prev_level","title":"goto_prev_level","text":"level.h<pre><code>void goto_prev_level();\n</code></pre> <p>Fungsi ini mengubah <code>current_level</code> ke level sebelumnya dalam linked list.</p>"},{"location":"development/modules/level/#change_level","title":"change_level","text":"level.h<pre><code>void change_level();\n</code></pre> <p>Fungsi <code>change_level</code> digunakan untuk mengganti level permainan saat ini. Fungsi ini menyalin data peta, switch, dan obstacle dari <code>current_level</code> ke variabel global yang sesuai dan melakukan inisialisasi ulang status tombol-tombol level.</p>"},{"location":"development/modules/level/#render_level","title":"render_level","text":"level.h<pre><code>void render_level(SDL_Renderer *renderer);\n</code></pre> <p>Fungsi <code>render_level</code> bertanggung jawab untuk menggambar peta level saat ini ke layar. Fungsi ini akan melakukan iterasi melalui array <code>current_level_map</code> dan menggambar tile yang sesuai pada setiap posisi. Fungsi ini juga akan memanggil fungsi-fungsi dari modul <code>obstacles</code> untuk menggambar elemen-elemen seperti koin, gerbang keluar, tombol, dan rintangan lainnya.</p>"},{"location":"development/modules/level/#clear_level","title":"clear_level","text":"level.h<pre><code>void clear_level();\n</code></pre> <p>Fungsi ini membersihkan semua memori yang dialokasikan untuk level, termasuk node level, switch, switch obstacles, dan saws. Fungsi ini dipanggil saat game selesai atau keluar.</p>"},{"location":"development/modules/level/#interaksi-dengan-modul-lain","title":"Interaksi dengan modul lain","text":"<p>Modul <code>level</code> berinteraksi dengan modul lain sebagai berikut:</p> <ul> <li>Modul <code>level_parser</code>: Modul <code>level</code> menggunakan fungsi <code>load_json_levels</code> dari <code>level_parser</code> untuk memuat data level dari file JSON.</li> <li>Modul <code>entity</code> (terutama <code>player</code>): Modul <code>level</code> berinteraksi dengan entity pemain untuk:<ul> <li>Deteksi Tabrakan: State permainan akan menggunakan data peta dari <code>current_level_map</code> untuk mendeteksi tabrakan antara pemain dan tile-tile di level (misalnya, lantai, dinding, rintangan).</li> <li>Interaksi dengan Elemen Level: State permainan akan memeriksa interaksi pemain dengan elemen-elemen level seperti koin (untuk menambah skor), gerbang keluar (untuk berpindah ke level berikutnya), dan tombol (untuk memicu perubahan pada level). Informasi tentang posisi dan jenis tile di <code>current_level_map</code> digunakan untuk menentukan interaksi ini.</li> </ul> </li> <li>Modul <code>obstacles</code>: Modul <code>level</code> menggunakan fungsi-fungsi dari modul <code>obstacles</code> (seperti <code>draw_coin</code>, <code>draw_gate</code>, <code>draw_switch</code>, <code>draw_spike</code>, <code>draw_rotating_saw</code>) untuk menggambar elemen-elemen interaktif dan rintangan dalam level saat <code>render_level</code> dipanggil.</li> </ul>"},{"location":"development/modules/level_parser/","title":"Modul <code>level_parser</code>","text":"<p>Pembuat: Ikhsan Satriadi (241511080)</p> <p>File: <code>level_parser.h</code> &amp; <code>level_parser.c</code></p>"},{"location":"development/modules/level_parser/#variabel-dan-konstanta","title":"Variabel dan Konstanta","text":""},{"location":"development/modules/level_parser/#max_levels","title":"MAX_LEVELS","text":"level_parser.h<pre><code>#define MAX_LEVELS 1000\n</code></pre> <p>Konstanta <code>MAX_LEVELS</code> mendefinisikan jumlah maksimum level yang dapat dimuat ke dalam game.</p>"},{"location":"development/modules/level_parser/#penjelasan-setiap-fungsi","title":"Penjelasan Setiap Fungsi","text":""},{"location":"development/modules/level_parser/#get_filename_ext","title":"get_filename_ext","text":"level_parser.h<pre><code>const char *get_filename_ext(const char *filename);\n</code></pre> <p>Fungsi ini mengembalikan pointer ke ekstensi nama file dari string <code>filename</code> yang diberikan.</p>"},{"location":"development/modules/level_parser/#get_json_string","title":"get_json_string","text":"level_parser.h<pre><code>char *get_json_string(const char *file);\n</code></pre> <p>Fungsi ini membaca seluruh konten file yang ditentukan oleh <code>file</code> dan mengembalikan isinya sebagai string yang dialokasikan secara dinamis.</p>"},{"location":"development/modules/level_parser/#get_level_from_json","title":"get_level_from_json","text":"level_parser.h<pre><code>LevelNode *get_level_from_json(const char *json_str);\n</code></pre> <p>Fungsi ini mengurai string JSON yang diberikan (<code>json_str</code>) dan mengisi struktur <code>LevelNode</code> dengan data yang relevan. Fungsi ini menggunakan array pointer fungsi untuk memanggil fungsi-fungsi <code>set_*_from_json</code> yang sesuai berdasarkan urutan kunci dalam file JSON.</p>"},{"location":"development/modules/level_parser/#load_json_levels","title":"load_json_levels","text":"level_parser.h<pre><code>void load_json_levels(LevelNode **head, const char *dir);\n</code></pre>"},{"location":"development/modules/level_parser/#internal-functions","title":"Internal Functions","text":"<p>Fungsi untuk mengurai data dari objek JSON ke dalam struktur <code>LevelNode</code>. Setiap fungsi ini bertanggung jawab untuk mengisi bagian tertentu dari <code>LevelNode</code> berdasarkan data yang ditemukan dalam objek JSON.</p>"},{"location":"development/modules/level_parser/#set_level_name_from_json","title":"set_level_name_from_json","text":"level_parser.c<pre><code>void set_level_name_from_json(LevelNode *node, cJSON *json);\n</code></pre> <p>Mengatur nama level dari objek JSON.</p>"},{"location":"development/modules/level_parser/#set_prev_level_from_json","title":"set_prev_level_from_json","text":"level_parser.c<pre><code>void set_prev_level_from_json(LevelNode *node, cJSON *json);\n</code></pre> <p>Mengatur nama level sebelumnya dari objek JSON.</p>"},{"location":"development/modules/level_parser/#set_next_level_from_json","title":"set_next_level_from_json","text":"level_parser.c<pre><code>void set_next_level_from_json(LevelNode *node, cJSON *json);\n</code></pre> <p>Mengatur nama level berikutnya dari objek JSON.</p>"},{"location":"development/modules/level_parser/#set_player_spawn_from_json","title":"set_player_spawn_from_json","text":"level_parser.c<pre><code>void set_player_spawn_from_json(LevelNode *node, cJSON *json);\n</code></pre> <p>Mengatur posisi spawn pemain dari objek JSON.</p>"},{"location":"development/modules/level_parser/#set_fg_color_from_json_array","title":"set_fg_color_from_json_array","text":"level_parser.c<pre><code>void set_fg_color_from_json_array(LevelNode *node, cJSON *json);\n</code></pre> <p>Mengatur warna foreground dari objek JSON array.</p>"},{"location":"development/modules/level_parser/#set_bg_color_from_json_array","title":"set_bg_color_from_json_array","text":"level_parser.c<pre><code>void set_bg_color_from_json_array(LevelNode *node, cJSON *json);\n</code></pre> <p>Mengatur warna background dari objek JSON array.</p>"},{"location":"development/modules/level_parser/#set_bg_image_from_json","title":"set_bg_image_from_json","text":"level_parser.c<pre><code>void set_bg_image_from_json(LevelNode *node, cJSON *json);\n</code></pre> <p>Mengatur nama file gambar background dari objek JSON.</p>"},{"location":"development/modules/level_parser/#set_bg_music_from_json","title":"set_bg_music_from_json","text":"level_parser.c<pre><code>void set_bg_music_from_json(LevelNode *node, cJSON *json);\n</code></pre> <p>Mengatur nama file musik background dari objek JSON.</p>"},{"location":"development/modules/level_parser/#set_switches_from_json","title":"set_switches_from_json","text":"level_parser.c<pre><code>void set_switches_from_json(LevelNode *node, cJSON *json);\n</code></pre> <p>Mengatur data switch dari objek JSON. Fungsi ini mengurai array JSON menjadi struktur <code>Switch</code> yang berisi posisi tombol dan daftar switch yang terhubung.</p>"},{"location":"development/modules/level_parser/#set_switch_obstacles_from_json","title":"set_switch_obstacles_from_json","text":"level_parser.c<pre><code>void set_switch_obstacles_from_json(LevelNode *node, cJSON *json);\n</code></pre> <p>Mengatur data obstacle yang terhubung ke switch dari objek JSON. Fungsi ini mengurai array JSON menjadi struktur <code>Switch_Obstacles</code> yang berisi posisi tombol, daftar switch, dan daftar obstacle yang terhubung.</p>"},{"location":"development/modules/level_parser/#set_saws_from_json","title":"set_saws_from_json","text":"level_parser.c<pre><code>void set_saws_from_json(LevelNode *node, cJSON *json);\n</code></pre> <p>Mengatur data gergaji (saws) dari objek JSON. Fungsi ini mengurai array JSON menjadi struktur <code>Saw</code> yang berisi transformasi (posisi dan ukuran) dan fisika (kecepatan).</p>"},{"location":"development/modules/level_parser/#set_maps_from_json","title":"set_maps_from_json","text":"level_parser.c<pre><code>void set_maps_from_json(LevelNode *node, cJSON *json);\n</code></pre> <p>Mengatur data peta (map) dari objek JSON. Fungsi ini mengisi array 2D <code>node-&gt;map</code> dengan nilai integer dari array JSON.</p> <p>Fungsi ini memuat semua file JSON dari direktori yang ditentukan (<code>dir</code>), mengurai setiap file menjadi <code>LevelNode</code>, dan membangun linked list dari level-level yang dimuat.</p>"},{"location":"development/modules/main/","title":"Main Program","text":"<p>Pembuat: Ikhsan Satriadi (241511080)</p> <p>File: <code>main.c</code></p>"},{"location":"development/modules/main/#penjelasan-setiap-fungsi","title":"Penjelasan Setiap Fungsi","text":""},{"location":"development/modules/main/#main","title":"main","text":"main.c<pre><code>int main();\n</code></pre> <p>Fungsi <code>main</code> adalah titik masuk utama aplikasi. Fungsi ini menginisialisasi game, membuat instance game, memuat aset seperti font dan audio, dan memuat level dari direktori \"assets/levels/\". Kemudian, ia mengatur state game awal ke <code>menu_state</code>. Loop game utama berjalan hingga <code>game-&gt;is_exit</code> bernilai true. Dalam loop, ia menangani input dan event, menghitung <code>delta_time</code> untuk pembaruan fisika, memperbarui logika game, dan merender frame saat ini. Sebelum keluar, ia membersihkan state game saat ini dan memanggil <code>exit_game</code>.</p>"},{"location":"development/modules/menu_state/","title":"Modul <code>menu_state</code>","text":"<p>Pembuat: Helga Athifa Hidayat (241511077)</p> <p>File: <code>menu_state.c</code> &amp; <code>menu_state.h</code></p>"},{"location":"development/modules/menu_state/#variabel-dan-konstanta","title":"Variabel dan Konstanta","text":""},{"location":"development/modules/menu_state/#menu_state","title":"menu_state","text":"menu_state.h<pre><code>// Deklarasi menu_state agar bisa diakses di tempat lain\nextern GameState menu_state;\n</code></pre> <p><code>menu_state</code> mengimplementasikan sebuah <code>GameState</code>. Tidak ada struktur khusus yang didefinisikan di header file ini selain deklarasi dari <code>menu_state</code> itu sendiri. Implementasi detail dari struktur <code>GameState</code> dapat dilihat pada definisi <code>menu_state</code> di file <code>menu_state.c</code>.</p> menu_state.c<pre><code>// Definisi state menu\nGameState menu_state = {\n    .init = menu_init,\n    .handle_input = menu_handle_input,\n    .update = menu_update,\n    .render = menu_render,\n    .cleanup = menu_cleanup,\n};\n</code></pre>"},{"location":"development/modules/menu_state/#penjelasan-setiap-fungsi","title":"Penjelasan Setiap Fungsi","text":""},{"location":"development/modules/menu_state/#menu_init","title":"menu_init","text":"menu_state.h<pre><code>void menu_init();\n</code></pre> <p>Fungsi <code>menu_init</code> dipanggil ketika game memasuki state menu. Fungsi ini bertanggung jawab untuk melakukan inisialisasi yang diperlukan untuk menu, seperti:</p> <ul> <li>Mencetak pesan log yang menandakan inisialisasi state menu.</li> <li>Memulai pemutaran musik latar belakang menu menggunakan fungsi <code>play_music</code> dari modul <code>SFX</code>.</li> <li>Membuat entitas player pada posisi awal di layar menu.</li> <li>Mengubah level yang ditampilkan menjadi level 0.</li> </ul> menu_state.c<pre><code>void menu_init()\n{\n    SDL_Log(\"Menu State: Initialized\");\n    play_music(menu_bgm, INT32_MAX);\n\n    player = create_entity(120, 416, 32, 32, (SDL_Color){0, 0, 0, 255});\n\n    change_level(0);\n}\n</code></pre>"},{"location":"development/modules/menu_state/#menu_handle_input","title":"menu_handle_input","text":"menu_state.h<pre><code>void menu_handle_input(SDL_Event *);\n</code></pre> <p>Fungsi <code>menu_handle_input</code> dipanggil ketika ada input dari pengguna (misalnya, keyboard atau mouse) saat game berada di state menu. Fungsi ini menerima pointer ke event SDL sebagai input. Fungsi ini akan menangani input untuk navigasi menu (atas/bawah untuk memilih opsi, enter untuk konfirmasi) dan aksi yang sesuai (misalnya, memulai game atau keluar dari aplikasi).</p>"},{"location":"development/modules/menu_state/#menu_update","title":"menu_update","text":"menu_state.h<pre><code>void menu_update(double delta_time);\n</code></pre> <p>Fungsi <code>menu_update</code> dipanggil setiap frame untuk memperbarui logika yang terkait dengan state menu. Saat ini, implementasi fungsi ini kosong, yang berarti tidak ada pembaruan logika khusus yang terjadi di menu.</p>"},{"location":"development/modules/menu_state/#menu_render","title":"menu_render","text":"menu_state.h<pre><code>void menu_render(SDL_Renderer *renderer);\n</code></pre> <p>Fungsi <code>menu_render</code> dipanggil setiap frame untuk menggambar elemen-elemen UI dari menu ke layar. Fungsi ini menerima pointer ke renderer SDL sebagai input. Fungsi ini akan menggambar latar belakang, judul game, tombol menu (Start Game, Exit), dan indikator pilihan menu saat ini.</p> menu_state.c<pre><code>void menu_render(SDL_Renderer *renderer)\n{\n    ...\n    // level as background\n    render_level(renderer);\n    render_player(renderer, player);\n\n    // overlay\n    SDL_SetRenderDrawColor(renderer, 30, 30, 30, 120);\n    SDL_RenderFillRect(renderer, &amp;(SDL_FRect){0, 0, SCREEN_WIDTH, SCREEN_HEIGHT});\n\n    render_text(renderer, sixtyfourconvergence_font, \"JUMP &amp; SURVIVE\", 100, 80, 1.4, title_text_color);\n\n    // Start button\n    SDL_SetRenderDrawColor(renderer, start_button_color.r, start_button_color.g, start_button_color.b, 255);\n    SDL_RenderFillRect(renderer, &amp;start_button);\n    render_text(renderer, pixelify_font, \"Start Game\", start_button.x + 45, start_button.y + 5, 1, start_text_color);\n\n    // Exit button\n    SDL_SetRenderDrawColor(renderer, exit_button_color.r, exit_button_color.g, exit_button_color.b, 255);\n    SDL_RenderFillRect(renderer, &amp;exit_button);\n    render_text(renderer, pixelify_font, \"Exit\", exit_button.x + 120, exit_button.y + 5, 1, exit_text_color);\n\n    SDL_RenderPresent(renderer);\n}\n</code></pre>"},{"location":"development/modules/menu_state/#menu_cleanup","title":"menu_cleanup","text":"menu_state.h<pre><code>void menu_cleanup();\n</code></pre> <p>Fungsi <code>menu_cleanup</code> dipanggil ketika game keluar dari state menu. Fungsi ini bertanggung jawab untuk membersihkan sumber daya yang digunakan oleh menu, seperti menghentikan musik latar belakang menu.</p> menu_state.c<pre><code>void menu_cleanup()\n{\n    SDL_Log(\"Menu State: Cleanup\");\n    stop_music();\n}\n</code></pre>"},{"location":"development/modules/menu_state/#interaksi-dengan-modul-lain","title":"Interaksi dengan modul lain","text":"<p>Modul <code>menu_state</code> memiliki interaksi dengan modul lain sebagai berikut:</p> <ul> <li><code>stage0_state</code>: Ketika pemain memilih \"Start Game\" dari menu, fungsi <code>change_game_state</code> dipanggil untuk mengubah state game menjadi <code>stage0_state</code>.</li> <li><code>ui</code>: Modul <code>ui</code> digunakan untuk merender teks dan elemen-elemen antarmuka pengguna di menu menggunakan fungsi seperti <code>render_text</code>.</li> <li><code>player</code>: Modul <code>player</code> digunakan untuk membuat dan menampilkan entitas player di latar belakang menu.</li> <li><code>level</code>: Modul <code>level</code> digunakan untuk mengubah level yang ditampilkan menjadi level 0 sebagai latar belakang.</li> <li><code>SFX</code>: Modul <code>SFX</code> digunakan untuk memutar musik latar belakang menu menggunakan fungsi <code>play_music</code> dan menghentikannya menggunakan <code>stop_music</code> saat state menu diakhiri.</li> </ul>"},{"location":"development/modules/obstacle/","title":"Modul <code>obstacles</code>","text":"<p>Pembuat: Muhamad Syahid (241511081) &amp; Hanifidin Ibrahim (241511076)</p> <p>File: <code>obstacles.c</code> &amp; <code>obstacles.h</code></p>"},{"location":"development/modules/obstacle/#struktur-switch","title":"Struktur <code>Switch</code>","text":"obstacles.h<pre><code>typedef struct\n{\n    Vector button;\n    Vector switches[100];\n\n} Switch;\n</code></pre> <p>Struktur <code>Switch</code> digunakan untuk merepresentasikan sebuah tombol dalam level yang dapat mengaktifkan atau menonaktifkan elemen lain.</p> <ul> <li><code>button</code>: Menyimpan posisi tombol sebagai <code>Vector</code>.</li> <li><code>switches</code>: Array yang menyimpan posisi elemen-elemen (seperti platform) yang dipengaruhi oleh tombol ini.</li> </ul>"},{"location":"development/modules/obstacle/#struktur-switch_obstacles","title":"Struktur <code>Switch_Obstacles</code>","text":"obstacles.h<pre><code>typedef struct\n{\n    Vector button;\n    Vector switches[100];\n    Vector obstacles[100];\n\n} Switch_Obstacles;\n</code></pre> <p>Struktur <code>Switch_Obstacles</code> mirip dengan <code>Switch</code>, namun digunakan untuk tombol yang memengaruhi keberadaan rintangan.</p> <ul> <li><code>button</code>: Menyimpan posisi tombol sebagai <code>Vector</code>.</li> <li><code>switches</code>: Array yang menyimpan posisi elemen-elemen yang diaktifkan/dinonaktifkan.</li> <li><code>obstacles</code>: Array yang menyimpan posisi rintangan yang muncul/hilang saat tombol ditekan.</li> </ul>"},{"location":"development/modules/obstacle/#struktur-saw","title":"Struktur <code>Saw</code>","text":"obstacles.h<pre><code>typedef struct {\n    Transform transform;\n    Physics physics;\n} Saw;\n</code></pre> <p>Struktur <code>Saw</code> merepresentasikan objek gergaji sebagai rintangan bergerak.</p> <ul> <li><code>transform</code>: Menyimpan informasi posisi (<code>x</code>, <code>y</code>), lebar (<code>w</code>), dan tinggi (<code>h</code>) gergaji menggunakan struct <code>Transform</code>.</li> <li><code>physics</code>: Menyimpan informasi fisika gergaji seperti kecepatan horizontal dan vertikal menggunakan struct <code>Physics</code>.</li> </ul>"},{"location":"development/modules/obstacle/#struktur-sawmanager","title":"Struktur <code>SawManager</code>","text":"obstacles.h<pre><code>typedef struct {\n    Saw* saws[MAX_SAWS];\n    int count;\n} SawManager;\n</code></pre> <p>Struktur <code>SawManager</code> digunakan untuk mengelola banyak objek gergaji dalam satu level.</p> <ul> <li><code>saws</code>: Array pointer ke struct <code>Saw</code>, menyimpan hingga <code>MAX_SAWS</code> objek gergaji.</li> <li><code>count</code>: Menyimpan jumlah gergaji yang saat ini aktif dalam manager.</li> </ul>"},{"location":"development/modules/obstacle/#variabel-dan-konstanta","title":"Variabel dan Konstanta","text":""},{"location":"development/modules/obstacle/#saw_manager","title":"saw_manager","text":"obstacles.h<pre><code>extern SawManager saw_manager;\n</code></pre> <p>Variabel global <code>saw_manager</code> bertipe <code>SawManager</code>. Variabel ini digunakan untuk menyimpan dan mengelola semua objek gergaji yang ada di level saat ini.</p>"},{"location":"development/modules/obstacle/#max_saws","title":"MAX_SAWS","text":"obstacles.h<pre><code>#define MAX_SAWS 20\n</code></pre> <p>Konstanta <code>MAX_SAWS</code> mendefinisikan jumlah maksimum gergaji yang dapat dikelola oleh <code>SawManager</code>.</p>"},{"location":"development/modules/obstacle/#pi","title":"PI","text":"obstacles.h<pre><code>#define PI 3.14159265\n</code></pre> <p>Konstanta <code>PI</code> mendefinisikan nilai pi yang digunakan dalam perhitungan, untuk rotasi gergaji.</p>"},{"location":"development/modules/obstacle/#penjelasan-setiap-fungsi","title":"Penjelasan Setiap Fungsi","text":""},{"location":"development/modules/obstacle/#draw_rotating_saw","title":"draw_rotating_saw","text":"obstacles.h<pre><code>void draw_rotating_saw(SDL_Renderer *renderer, SDL_FRect rect, float angle);\n</code></pre> <p>Fungsi <code>draw_rotating_saw</code> digunakan untuk menggambar objek gergaji yang berputar pada layar. Fungsi ini menerima renderer, persegi panjang posisi dan ukuran gergaji, serta sudut rotasi sebagai input.</p>"},{"location":"development/modules/obstacle/#draw_triangle","title":"draw_triangle","text":"obstacles.h<pre><code>void draw_triangle(SDL_Renderer *renderer, SDL_FRect rect);\n</code></pre> <p>Fungsi <code>draw_triangle</code> digunakan untuk menggambar segitiga, yang digunakan untuk merepresentasikan rintangan seperti spike (paku). Fungsi ini menerima renderer dan persegi panjang posisi dan ukuran segitiga sebagai input.</p>"},{"location":"development/modules/obstacle/#draw_coin","title":"draw_coin","text":"obstacles.h<pre><code>void draw_coin(SDL_Renderer *renderer, SDL_FRect rect, int type);\n</code></pre> <p>Fungsi <code>draw_coin</code> digunakan untuk menggambar objek koin pada layar. Fungsi ini menerima renderer, persegi panjang posisi dan ukuran koin, serta tipe koin sebagai input.</p>"},{"location":"development/modules/obstacle/#draw_gate","title":"draw_gate","text":"obstacles.h<pre><code>void draw_gate(SDL_Renderer *renderer, SDL_FRect exit_rect);\n</code></pre> <p>Fungsi <code>draw_gate</code> digunakan untuk menggambar gerbang keluar pada layar. Fungsi ini menerima renderer dan persegi panjang posisi dan ukuran gerbang sebagai input.</p>"},{"location":"development/modules/obstacle/#create_saw","title":"create_saw","text":"obstacles.h<pre><code>Saw *create_saw(float x, float y, float w, float h, float velocity_x, float velocity_y);\n</code></pre> <p>Fungsi <code>create_saw</code> digunakan untuk membuat objek gergaji baru. Fungsi ini menerima posisi <code>x</code> dan <code>y</code>, lebar <code>w</code>, tinggi <code>h</code>, serta kecepatan horizontal <code>velocity_x</code> dan vertikal <code>velocity_y</code> sebagai input dan mengembalikan pointer ke objek <code>Saw</code> yang baru dibuat.</p>"},{"location":"development/modules/obstacle/#update_saw","title":"update_saw","text":"obstacles.h<pre><code>void update_saw(Saw *saw, float delta_time);\n</code></pre> <p>Fungsi <code>update_saw</code> digunakan untuk memperbarui posisi objek gergaji berdasarkan kecepatannya dan waktu yang berlalu (<code>delta_time</code>). Fungsi ini menerima pointer ke objek <code>Saw</code> dan nilai <code>delta_time</code> sebagai input.</p>"},{"location":"development/modules/obstacle/#render_saw","title":"render_saw","text":"obstacles.h<pre><code>void render_saw(SDL_Renderer *renderer, Saw *saw, float angle);\n</code></pre> <p>Fungsi <code>render_saw</code> digunakan untuk merender (menggambar) objek gergaji pada layar. Fungsi ini menerima renderer, pointer ke objek <code>Saw</code>, dan sudut rotasi sebagai input.</p>"},{"location":"development/modules/obstacle/#init_saw_manager","title":"init_saw_manager","text":"obstacles.h<pre><code>void init_saw_manager(SawManager* manager);\n</code></pre> <p>Fungsi <code>init_saw_manager</code> digunakan untuk menginisialisasi <code>SawManager</code>. Fungsi ini menerima pointer ke <code>SawManager</code> sebagai input dan mengatur nilai awal <code>count</code> menjadi 0.</p>"},{"location":"development/modules/obstacle/#add_saw","title":"add_saw","text":"obstacles.h<pre><code>void add_saw(SawManager* manager, float x, float y, float w, float h, float velocity_x, float velocity_y);\n</code></pre> <p>Fungsi <code>add_saw</code> digunakan untuk menambahkan objek gergaji baru ke dalam <code>SawManager</code>. Fungsi ini menerima pointer ke <code>SawManager</code>, posisi <code>x</code> dan <code>y</code>, lebar <code>w</code>, tinggi <code>h</code>, serta kecepatan horizontal <code>velocity_x</code> dan vertikal <code>velocity_y</code> sebagai input.</p>"},{"location":"development/modules/obstacle/#cleanup_saw_manager","title":"cleanup_saw_manager","text":"obstacles.h<pre><code>void cleanup_saw_manager(SawManager* manager);\n</code></pre> <p>Fungsi <code>cleanup_saw_manager</code> digunakan untuk membersihkan memori yang dialokasikan untuk objek-objek gergaji yang dikelola oleh <code>SawManager</code>. Fungsi ini menerima pointer ke <code>SawManager</code> sebagai input dan membebaskan memori yang digunakan oleh setiap <code>Saw</code> dalam array <code>saws</code>.</p>"},{"location":"development/modules/obstacle/#setup_level_saws","title":"setup_level_saws","text":"obstacles.h<pre><code>void setup_level_saws(int level);\n</code></pre> <p>Fungsi <code>setup_level_saws</code> digunakan untuk mengatur posisi dan properti gergaji yang ada dalam level tertentu. Implementasi fungsi ini (terlihat di <code>obstacles.c</code>) menggunakan nilai <code>current_level</code> dari modul <code>level</code> untuk menentukan gergaji mana yang akan ditambahkan ke <code>saw_manager</code> untuk setiap level.</p>"},{"location":"development/modules/obstacle/#interaksi-dengan-modul-lain","title":"Interaksi dengan modul lain","text":"<p>Modul <code>obstacles</code> berinteraksi dengan modul lain sebagai berikut:</p> <ul> <li>Modul Vector: Struktur <code>Switch</code> dan <code>Switch_Obstacles</code> menggunakan struct <code>Vector</code> dari modul <code>vector</code>.</li> <li>Modul <code>stage0_state</code>: Modul <code>obstacles</code> berinteraksi dengan <code>stage0_state</code> melalui fungsi <code>setup_level_saws</code>. Fungsi ini dipanggil dari <code>stage0_init</code> dan <code>stage0_update</code> untuk mengatur gergaji yang sesuai untuk level saat ini di stage 1.</li> <li>Modul <code>level</code>: Modul <code>obstacles</code> berinteraksi dengan <code>level</code> untuk mendapatkan informasi tentang level saat ini (<code>current_level</code>) dan ukuran tile (<code>TILE_SIZE</code>). Informasi ini digunakan dalam fungsi <code>setup_level_saws</code> untuk menentukan posisi dan konfigurasi gergaji. Selain itu, fungsi <code>draw_rotating_saw</code>, <code>draw_triangle</code>, <code>draw coin</code> dan <code>draw_gate</code> dari modul <code>obstacles</code> dipanggil oleh fungsi <code>render_level</code> dari modul <code>level</code> untuk menggambar gergaji pada level saat ini.</li> </ul>"},{"location":"development/modules/physics/","title":"Modul <code>physics</code>","text":"<p>Pembuat: Muhamad Syahid (241511081)</p> <p>File: <code>physics.c</code> &amp; <code>physics.h</code></p>"},{"location":"development/modules/physics/#struktur-physics","title":"Struktur <code>Physics</code>","text":"physics.h<pre><code>typedef struct\n{\n  double velocity_x; // Kecepatan horizontal\n  double velocity_y; // Kecepatan vertikal\n  float gravity;     // Skala gravitasi\n  float speed;       // Kecepatan dasar\n  float friction;    // Faktor gesekan\n} Physics;\n</code></pre> <p>Struktur <code>Physics</code> menyimpan informasi yang berkaitan dengan fisika sebuah entity, termasuk:</p> <ul> <li><code>velocity_x</code>: Kecepatan entity pada sumbu horizontal.</li> <li><code>velocity_y</code>: Kecepatan entity pada sumbu vertikal.</li> <li><code>gravity</code>: Skala faktor gravitasi yang diterapkan pada entity.</li> <li><code>speed</code>: Kecepatan dasar pergerakan entity.</li> <li><code>friction</code>: Faktor yang mempengaruhi pengurangan kecepatan entity akibat gesekan.</li> </ul>"},{"location":"development/modules/physics/#variabel-dan-konstanta","title":"Variabel dan Konstanta","text":""},{"location":"development/modules/physics/#gravity","title":"GRAVITY","text":"<pre><code>#define GRAVITY 15.9f\n</code></pre> <p>Konstanta yang mendefinisikan nilai dasar gravitasi yang akan diterapkan pada entity. Nilai ini kemudian dapat diskalakan oleh komponen <code>gravity</code> pada struktur <code>Physics</code>.</p>"},{"location":"development/modules/physics/#penjelasan-setiap-fungsi","title":"Penjelasan Setiap Fungsi","text":""},{"location":"development/modules/physics/#apply_gravity","title":"apply_gravity","text":"physics.h<pre><code>void apply_gravity(Physics *physics, float delta_time);\n</code></pre> <p>Fungsi <code>apply_gravity</code> menerapkan gaya gravitasi pada komponen fisika sebuah entity. Fungsi ini menerima pointer ke struktur <code>Physics</code> dan <code>delta_time</code> (waktu yang berlalu sejak frame terakhir) sebagai input. Fungsi ini memperbarui <code>velocity_y</code> berdasarkan nilai <code>GRAVITY</code>, <code>physics-&gt;gravity</code>, dan <code>delta_time</code>.</p> physics.c<pre><code>#include \"physics.h\"\n#include \"game_stat.h\"\n#include \"sfx.h\"\n#include \"player.h\"\n#include \"level.h\"\n#include &lt;stdlib.h&gt;\n\n#define GRAVITY 15.9f\n\nvoid apply_gravity(Physics *physics, float delta_time)\n{\n  physics-&gt;velocity_y += GRAVITY * physics-&gt;gravity * delta_time;\n}\n</code></pre>"},{"location":"development/modules/physics/#check_collision","title":"check_collision","text":"physics.h<pre><code>int check_collision(Transform a, Transform b);\n</code></pre> <p>Fungsi <code>check_collision</code> melakukan deteksi tabrakan antara dua bounding box yang sejajar dengan sumbu (Axis-Aligned Bounding Box atau AABB). Fungsi ini menerima dua struktur <code>Transform</code> (yang memiliki anggota <code>x</code>, <code>y</code>, <code>w</code>, dan <code>h</code> untuk posisi dan dimensi) sebagai input. Fungsi ini mengembalikan nilai bukan nol (true) jika kedua bounding box bertabrakan, dan nol (false) jika tidak.</p> physics.c<pre><code>int check_collision(Transform a, Transform b)\n{\n  return (a.x &lt; b.x + b.w &amp;&amp;\n          a.x + a.w &gt; b.x &amp;&amp;\n          a.y &lt; b.y + b.h &amp;&amp;\n          a.y + a.h &gt; b.y);\n}\n</code></pre>"},{"location":"development/modules/physics/#check_collision_all","title":"check_collision_all","text":"physics.h<pre><code>Transform *check_collision_all(Transform *entity, Transform *objects, int object_count);\n</code></pre> <p>Fungsi <code>check_collision_all</code> memeriksa apakah sebuah entity (direpresentasikan oleh <code>Transform</code>) bertabrakan dengan salah satu objek dalam array <code>objects</code>. Fungsi ini menerima pointer ke <code>Transform</code> entity, array pointer ke <code>Transform</code> objek-objek lain, dan jumlah objek dalam array. Fungsi ini mengembalikan pointer ke <code>Transform</code> objek pertama yang bertabrakan dengan entity, atau <code>NULL</code> jika tidak ada tabrakan.</p> physics.c<pre><code>Transform *check_collision_all(Transform *entity, Transform *objects, int object_count)\n{\n  for (int i = 0; i &lt; object_count; i++)\n  {\n    if (check_collision(*entity, *objects[i]))\n    {\n      return objects[i]; // Return objek pertama yang bertabrakan\n    }\n  }\n  return NULL; // Tidak ada tabrakan\n}\n</code></pre>"},{"location":"development/modules/physics/#handle_saw_collision","title":"handle_saw_collision","text":"physics.h<pre><code>void handle_saw_collision(Transform saw_transform, Transform player_transform);\n</code></pre> <p>Fungsi <code>handle_saw_collision</code> secara spesifik menangani tabrakan antara gergaji (saw) dan pemain. Fungsi ini menerima <code>Transform</code> dari gergaji dan <code>Transform</code> dari pemain sebagai input. Jika terjadi tabrakan (menggunakan fungsi <code>check_collision</code>), fungsi ini akan memutar efek suara kematian (<code>dead_sfx</code>), mengurangi nyawa pemain menggunakan fungsi <code>sub_life</code> dari modul <code>game_stat</code>, dan mengatur ulang posisi pemain ke posisi awal level saat ini menggunakan fungsi <code>reinitiate_player</code> dari modul <code>player</code>.</p> physics.c<pre><code>void handle_saw_collision(Transform saw_transform, Transform player_transform)\n{\n  if (check_collision(saw_transform, player_transform))\n  {\n    play_sound(dead_sfx, 4, 0);\n    sub_life(&amp;game_stat);\n    reinitiate_player(player, current_level);\n  }\n}\n</code></pre>"},{"location":"development/modules/physics/#interaksi-dengan-modul-lain","title":"Interaksi dengan modul lain","text":"<p>Modul <code>physics</code> berinteraksi dengan modul lain sebagai berikut:</p> <ul> <li>Modul <code>entity</code>: Modul <code>physics</code> bekerja dengan komponen <code>Physics</code> dan <code>Transform</code> yang merupakan bagian dari struktur <code>Entity</code> (meskipun definisi eksplisit <code>Entity</code> tidak diberikan dalam file ini). Fungsi <code>apply_gravity</code> menerima pointer ke <code>Physics</code> component, dan fungsi-fungsi deteksi tabrakan (<code>check_collision</code> dan <code>check_collision_all</code>) menerima dan mengembalikan pointer ke <code>Transform</code> components.</li> <li>Modul <code>game_stat</code>: Fungsi <code>handle_saw_collision</code> memanggil fungsi <code>sub_life</code> dari modul <code>game_stat</code> untuk mengurangi jumlah nyawa pemain ketika pemain bertabrakan dengan gergaji.</li> <li>Modul <code>sfx</code>: Fungsi <code>handle_saw_collision</code> memanggil fungsi <code>play_sound</code> dari modul <code>sfx</code> untuk memainkan efek suara kematian ketika pemain bertabrakan dengan gergaji.</li> <li>Modul <code>player</code>: Fungsi <code>handle_saw_collision</code> memanggil fungsi <code>reinitiate_player</code> dari modul <code>player</code> untuk mengatur ulang posisi pemain setelah bertabrakan dengan gergaji.</li> <li>Modul <code>level</code>: Fungsi <code>handle_saw_collision</code> mengakses variabel global <code>current_level</code> dari modul <code>level</code> untuk menentukan posisi awal pemain saat di-reinisialisasi. Modul <code>physics</code> juga berinteraksi dengan modul <code>level</code> untuk mendapatkan informasi tentang objek-objek level yang perlu diperiksa tabrakan dengan pemain (misalnya, melalui fungsi <code>check_collision_all</code>).</li> </ul>"},{"location":"development/modules/player/","title":"Modul <code>player</code>","text":"<p>Pembuat: Hisyam Khaeru Umam (241511078), Muhamad Syahid (241511081) &amp; Ikhsan Satriadi (241511080)</p> <p>File: <code>player.c</code> &amp; <code>player.h</code></p>"},{"location":"development/modules/player/#struktur-player-menggunakan-struktur-entity-dari-modul-entity","title":"Struktur <code>player</code> (menggunakan struktur <code>Entity</code> dari modul <code>entity</code>)","text":"player.h<pre><code>#include \"entity.h\"\n\nextern Entity *player;\n</code></pre> <p>Modul <code>player</code> tidak mendefinisikan struktur baru, melainkan menggunakan struktur <code>Entity</code> yang didefinisikan di modul <code>entity</code>. Variabel global <code>player</code> adalah pointer ke instance <code>Entity</code> yang merepresentasikan pemain dalam game. Struktur <code>Entity</code> kemungkinan memiliki komponen seperti <code>Transform</code> untuk posisi dan ukuran, serta <code>Physics</code> untuk menangani pergerakan dan fisika.</p>"},{"location":"development/modules/player/#variabel-dan-konstanta","title":"Variabel dan Konstanta","text":""},{"location":"development/modules/player/#player","title":"player","text":"<pre><code>extern Entity *player;\n</code></pre> <p>Variabel global <code>player</code> adalah pointer ke instance <code>Entity</code> yang merepresentasikan pemain dalam game.</p>"},{"location":"development/modules/player/#is_facing_right","title":"is_facing_right","text":"<pre><code>extern bool is_facing_right;\n</code></pre> <p>Variabel global boolean yang menunjukkan arah hadap pemain (true jika menghadap kanan, false jika menghadap kiri).</p>"},{"location":"development/modules/player/#key_state","title":"key_state","text":"<pre><code>extern bool key_state[SDL_SCANCODE_COUNT];\n</code></pre> <p>Array boolean yang menyimpan status tombol keyboard saat ini. Ini digunakan untuk menangani input pemain.</p>"},{"location":"development/modules/player/#player_jump","title":"PLAYER_JUMP","text":"<pre><code>#define PLAYER_JUMP -5000.0f\n</code></pre> <p>Konstanta yang mendefinisikan nilai gaya vertikal yang diterapkan saat pemain melompat. Nilai negatif menunjukkan arah ke atas.</p>"},{"location":"development/modules/player/#player_move_multiplier","title":"PLAYER_MOVE_MULTIPLIER","text":"<pre><code>#define PLAYER_MOVE_MULTIPLIER 2000.0f\n</code></pre> <p>Konstanta yang mendefinisikan faktor pengali untuk kecepatan pergerakan horizontal pemain.</p>"},{"location":"development/modules/player/#penjelasan-setiap-fungsi","title":"Penjelasan Setiap Fungsi","text":""},{"location":"development/modules/player/#create_player","title":"create_player","text":"player.h<pre><code>Entity *create_player(Transform transform, double gravity, double speed, double friction);\n</code></pre> <p>Fungsi <code>create_player</code> membuat dan menginisialisasi entity pemain. Fungsi ini menerima parameter <code>transform</code> (posisi dan ukuran awal), <code>gravity</code>, <code>speed</code>, dan <code>friction</code> untuk komponen fisika pemain. Fungsi ini mengalokasikan memori untuk entity pemain dan mengembalikan pointer ke entity yang baru dibuat.</p> player.c<pre><code>#include &lt;stdlib.h&gt;\n#include &lt;SDL3/SDL.h&gt;\n#include \"player.h\"\n#include \"level.h\"\n#include \"SFX.h\"\n#include \"entity.h\"\n\nEntity *player;\n\nbool is_facing_right = true;\n\n// array untuk menyimpan status tombol\nbool key_state[SDL_SCANCODE_COUNT];\n\nEntity *create_player(Transform transform, double gravity, double speed, double friction)\n{\n  Physics player_physics = {\n      .velocity_x = 0,\n      .velocity_y = 0,\n      .gravity = gravity,\n      .speed = speed,\n      .friction = friction,\n  };\n\n  Entity *player = create_entity(transform, player_physics, (EntityRenderComponent){});\n\n  return player;\n}\n</code></pre>"},{"location":"development/modules/player/#initiate_player","title":"initiate_player","text":"player.h<pre><code>void initiate_player(Entity *player, int x, int y);\n</code></pre> <p>Fungsi <code>initiate_player</code> digunakan untuk mengatur posisi awal pemain. Fungsi ini menerima pointer ke entity pemain dan koordinat x dan y sebagai input, lalu mengatur posisi <code>transform</code> dari entity pemain ke nilai yang diberikan.</p> player.c<pre><code>void initiate_player(Entity *player, int x, int y)\n{\n  player-&gt;transform.x = x;\n  player-&gt;transform.y = y;\n}\n</code></pre>"},{"location":"development/modules/player/#reinitiate_player","title":"reinitiate_player","text":"player.h<pre><code>void reinitiate_player(Entity *player, int level);\n</code></pre> <p>Fungsi <code>reinitiate_player</code> digunakan untuk mengatur ulang posisi pemain berdasarkan level yang diberikan. Fungsi ini menerima pointer ke entity pemain dan nomor level sebagai input, lalu memanggil <code>initiate_player</code> dengan posisi awal yang berbeda-beda tergantung pada levelnya.</p>"},{"location":"development/modules/player/#handle_player_input","title":"handle_player_input","text":"player.h<pre><code>void handle_player_input(Entity *player, SDL_Event *event);\n</code></pre> <p>Fungsi <code>handle_player_input</code> menangani input dari pemain. Fungsi ini menerima pointer ke entity pemain dan event SDL sebagai input. Berdasarkan event (tekanan tombol keyboard), fungsi ini akan memperbarui status <code>key_state</code> dan memicu aksi pemain seperti bergerak atau melompat.</p>"},{"location":"development/modules/player/#destroy_player","title":"destroy_player","text":"player.h<pre><code>void destroy_player(Entity *player);\n</code></pre> <p>Fungsi <code>destroy_player</code> bertanggung jawab untuk membersihkan dan membebaskan sumber daya yang terkait dengan entity pemain jika diperlukan.</p>"},{"location":"development/modules/player/#render_player","title":"render_player","text":"player.h<pre><code>void render_player(SDL_Renderer *renderer, Entity *player);\n</code></pre> <p>Fungsi <code>render_player</code> digunakan untuk menggambar representasi visual pemain ke layar. Fungsi ini menerima renderer SDL dan pointer ke entity pemain sebagai input. Fungsi ini akan menggunakan informasi posisi dan ukuran dari <code>player-&gt;transform</code> untuk menggambar sprite atau bentuk pemain.</p>"},{"location":"development/modules/player/#interaksi-dengan-modul-lain","title":"Interaksi dengan modul lain","text":"<p>Modul <code>player</code> berinteraksi dengan modul lain sebagai berikut:</p> <ul> <li>Modul <code>entity</code>: Modul <code>player</code> menggunakan struktur <code>Entity</code> yang didefinisikan dalam modul <code>entity</code> untuk merepresentasikan pemain. Ini termasuk penggunaan komponen <code>Transform</code> untuk posisi dan ukuran, serta <code>Physics</code> untuk pergerakan.</li> <li>Modul <code>stage0_state</code>: Modul player berinteraksi erat dengan state permainan (<code>stage0_state</code>). Input pemain yang ditangani oleh <code>handle_player_input</code> akan mempengaruhi pergerakan dan aksi pemain dalam game loop yang berjalan di state-state ini.</li> <li>Modul <code>ui</code>: Modul <code>ui</code> menggunakan fungsi <code>render_player</code> untuk menampilkan visual pemain di berbagai layar UI dan layar congratulations. Tampilan player juga digunakan di menu state sebagai elemen visual latar belakang.</li> <li>Modul <code>level</code>: Modul <code>level</code> berinteraksi dengan posisi pemain (<code>player-&gt;transform</code>) untuk deteksi tabrakan dengan tile map dan elemen-elemen level lainnya.</li> <li>Modul <code>SFX</code>: Modul <code>SFX</code> digunakan untuk memutar efek suara yang terkait dengan aksi pemain, seperti melompat (dipanggil dari dalam <code>handle_player_input</code> atau logika update pemain).</li> </ul>"},{"location":"development/modules/sfx/","title":"Modul <code>SFX</code>","text":"<p>Pembuat: Hisyam Khaeru Umam (241511078)</p> <p>File: <code>SFX.c</code> &amp; <code>SFX.h</code></p>"},{"location":"development/modules/sfx/#variabel-dan-konstanta","title":"Variabel dan Konstanta","text":""},{"location":"development/modules/sfx/#stage0_bgm","title":"stage0_bgm","text":"<pre><code>extern Mix_Music *stage0_bgm;\n</code></pre> <p>Variabel global untuk menyimpan musik latar belakang stage 0.</p>"},{"location":"development/modules/sfx/#menu_bgm","title":"menu_bgm","text":"<pre><code>extern Mix_Music *menu_bgm;\n</code></pre> <p>Variabel global untuk menyimpan musik latar belakang menu.</p>"},{"location":"development/modules/sfx/#stage1_bgm","title":"stage1_bgm","text":"<pre><code>extern Mix_Music *stage1_bgm;\n</code></pre> <p>Variabel global untuk menyimpan musik latar belakang stage 1.</p>"},{"location":"development/modules/sfx/#win_bgm","title":"win_bgm","text":"<pre><code>extern Mix_Music *win_bgm;\n</code></pre> <p>Variabel global untuk menyimpan musik kemenangan.</p>"},{"location":"development/modules/sfx/#jump_sfx","title":"jump_sfx","text":"<pre><code>extern Mix_Chunk *jump_sfx;\n</code></pre> <p>Variabel global untuk menyimpan efek suara lompatan.</p>"},{"location":"development/modules/sfx/#gate_sfx","title":"gate_sfx","text":"<pre><code>extern Mix_Chunk *gate_sfx;\n</code></pre> <p>Variabel global untuk menyimpan efek suara gerbang.</p>"},{"location":"development/modules/sfx/#coin_sfx","title":"coin_sfx","text":"<pre><code>extern Mix_Chunk *coin_sfx;\n</code></pre> <p>Variabel global untuk menyimpan efek suara koin.</p>"},{"location":"development/modules/sfx/#dead_sfx","title":"dead_sfx","text":"<pre><code>extern Mix_Chunk *dead_sfx;\n</code></pre> <p>Variabel global untuk menyimpan efek suara kematian.</p>"},{"location":"development/modules/sfx/#gameover_sfx","title":"gameover_sfx","text":"<pre><code>extern Mix_Chunk *gameover_sfx;\n</code></pre> <p>Variabel global untuk menyimpan efek suara game over.</p>"},{"location":"development/modules/sfx/#penjelasan-setiap-fungsi","title":"Penjelasan Setiap Fungsi","text":""},{"location":"development/modules/sfx/#init_audio","title":"init_audio","text":"SFX.h<pre><code>void init_audio();\n</code></pre> <p>Fungsi <code>init_audio</code> bertugas untuk menginisialisasi sistem audio menggunakan SDL Mixer, mengatur format audio, membuka audio device, dan memuat semua file musik dan efek suara yang akan digunakan dalam game.</p> SFX.c<pre><code>void init_audio()\n{\n    SDL_AudioSpec spec = {\n        .format = SDL_AUDIO_S8,\n        .freq = 44100,\n        .channels = 2,\n    };\n    if (!Mix_Init(MIX_INIT_MP3) || !Mix_OpenAudio(0, &amp;spec))\n    {\n        printf(\"Failed to initialize SDL3 Mixer: %s\\n\", SDL_GetError());\n        return;\n    }\n\n    // Memuat musik dan efek suara\n    stage0_bgm = load_music(\"assets/SFX/bg-music1.mp3\");\n    stage1_bgm = load_music(\"assets/SFX/bg-music2.mp3\");\n    menu_bgm = load_music(\"assets/SFX/bg-music-home1.mp3\");\n    win_bgm = load_music(\"assets/SFX/champion.mp3\");\n    jump_sfx = load_sound(\"assets/SFX/jump.wav\");\n    gate_sfx = load_sound(\"assets/SFX/exit-gate.wav\");\n    coin_sfx = load_sound(\"assets/SFX/coin.wav\");\n    dead_sfx = load_sound(\"assets/SFX/dead.wav\");\n    gameover_sfx = load_sound(\"assets/SFX/game-over.wav\");\n}\n</code></pre>"},{"location":"development/modules/sfx/#load_sound","title":"load_sound","text":"SFX.h<pre><code>Mix_Chunk *load_sound(const char *file);\n</code></pre> <p>Fungsi <code>load_sound</code> menerima path file audio dan memuatnya sebagai efek suara (chunk).</p> SFX.c<pre><code>Mix_Chunk *load_sound(const char *file)\n{\n    Mix_Chunk *sound = Mix_LoadWAV(file);\n    if (!sound)\n    {\n        printf(\"Failed to load sound %s: %s\\n\", file, SDL_GetError());\n    }\n    return sound;\n}\n</code></pre>"},{"location":"development/modules/sfx/#load_music","title":"load_music","text":"SFX.h<pre><code>Mix_Music *load_music(const char *file);\n</code></pre> <p>Fungsi <code>load_music</code> menerima path file audio dan memuatnya sebagai musik.</p> SFX.c<pre><code>Mix_Music *load_music(const char *file)\n{\n    Mix_Music *music = Mix_LoadMUS(file);\n    if (!music)\n    {\n        printf(\"Failed to load music %s: %s\\n\", file, SDL_GetError());\n    }\n    return music;\n}\n</code></pre>"},{"location":"development/modules/sfx/#play_sound","title":"play_sound","text":"SFX.h<pre><code>void play_sound(Mix_Chunk *sound, int channel, int loops);\n</code></pre> <p>Fungsi <code>play_sound</code> digunakan untuk memainkan efek suara pada channel tertentu dengan jumlah loop yang ditentukan.</p> SFX.c<pre><code>void play_sound(Mix_Chunk *sound, int channel,int loops)\n{\n    if (sound)\n    {\n        Mix_PlayChannel(channel, sound, loops);\n    }\n}\n</code></pre>"},{"location":"development/modules/sfx/#play_music","title":"play_music","text":"SFX.h<pre><code>void play_music(Mix_Music *sound, int loops);\n</code></pre> <p>Fungsi <code>play_music</code> digunakan untuk memainkan musik dengan jumlah loop yang ditentukan.</p> SFX.c<pre><code>void play_music(Mix_Music *sound, int loops)\n{\n    if (sound)\n    {\n        Mix_PlayMusic(sound, loops);\n    }\n}\n</code></pre>"},{"location":"development/modules/sfx/#stop_music","title":"stop_music","text":"SFX.h<pre><code>void stop_music();\n</code></pre> <p>Fungsi <code>stop_music</code> digunakan untuk menghentikan musik yang sedang diputar.</p> SFX.c<pre><code>void stop_music()\n{\n    Mix_HaltMusic();\n}\n</code></pre>"},{"location":"development/modules/sfx/#stop_sound","title":"stop_sound","text":"SFX.h<pre><code>void stop_sound(int channel);\n</code></pre> <p>Fungsi <code>stop_sound</code> digunakan untuk menghentikan efek suara yang sedang diputar pada channel tertentu.</p> SFX.c<pre><code>void stop_sound(int channel)\n{\n    Mix_HaltChannel(channel);\n}\n</code></pre>"},{"location":"development/modules/sfx/#cleanup_audio","title":"cleanup_audio","text":"SFX.h<pre><code>void cleanup_audio();\n</code></pre> <p>Fungsi <code>cleanup_audio</code> bertugas untuk membersihkan semua sumber daya audio yang telah dialokasikan dengan menutup audio device dan keluar dari sistem Mixer.</p> SFX.c<pre><code>void cleanup_audio()\n{\n    Mix_CloseAudio();\n    Mix_Quit();\n}\n</code></pre>"},{"location":"development/modules/sfx/#interaksi-dengan-modul-lain","title":"Interaksi dengan modul lain","text":"<p>Modul <code>SFX</code> memiliki interaksi yang luas dengan modul lain dalam game. Fungsi-fungsi seperti <code>play_sound</code> dan <code>play_music</code> dipanggil dari berbagai tempat di kode yang membutuhkan pemutaran audio. Beberapa contoh interaksi meliputi:</p> <ul> <li>Pemanggilan <code>play_sound(jump_sfx, ...)</code> di modul player ketika karakter melompat.</li> <li>Pemanggilan <code>play_music(stage0_bgm, -1)</code> di modul stage 0 untuk memulai musik latar belakang.</li> <li>Pemanggilan <code>play_music(menu_bgm, -1)</code> di modul menu state untuk memulai musik latar belakang menu.</li> <li>Pemanggilan <code>stop_music()</code> ketika terjadi transisi antar state atau kondisi tertentu dalam game.</li> </ul> <p>Secara umum, modul <code>SFX</code> menyediakan layanan audio yang dapat digunakan oleh hampir semua bagian game yang memerlukan efek suara atau musik.</p>"},{"location":"development/modules/stage0_state/","title":"Modul <code>stage0_state</code>","text":"<p>Pembuat: Hisyam Khaeru Umam (241511078), Muhamad Syahid (241511081), Ikhsan Satriadi (241511080) &amp; Helga Athifa Hidayat (241511077)</p> <p>File: <code>stage0_state.c</code> &amp; <code>stage0_state.h</code></p>"},{"location":"development/modules/stage0_state/#variabel-dan-konstanta","title":"Variabel dan Konstanta","text":""},{"location":"development/modules/stage0_state/#stage0_state","title":"stage0_state","text":"<pre><code>GameState stage0_state = {\n    .init = stage0_init,\n    .handle_input = stage0_handle_input,\n    .update = stage0_update,\n    .render = stage0_render,\n    .cleanup = stage0_cleanup,\n};\n</code></pre> <p>Variabel global <code>stage0_state</code> bertipe <code>GameState</code>. Struktur ini mendefinisikan kumpulan fungsi (pointer fungsi) yang akan dipanggil pada saat state game ini aktif. Fungsi-fungsi tersebut adalah <code>stage0_init</code> (inisialisasi state), <code>stage0_handle_input</code> (menangani input pengguna), <code>stage0_update</code> (memperbarui logika game), <code>stage0_render</code> (merender tampilan game), dan <code>stage0_cleanup</code> (membersihkan sumber daya yang digunakan oleh state).</p>"},{"location":"development/modules/stage0_state/#penjelasan-setiap-fungsi","title":"Penjelasan Setiap Fungsi","text":""},{"location":"development/modules/stage0_state/#stage0_init","title":"stage0_init","text":"stage0_state.h<pre><code>void stage0_init();\n</code></pre> <p>Fungsi <code>stage0_init</code> dipanggil ketika game memasuki state <code>stage0_state</code>. Fungsi ini bertanggung jawab untuk melakukan inisialisasi yang diperlukan untuk stage 0, termasuk:</p> <ul> <li>Mencetak log ke konsol bahwa state telah diinisialisasi.</li> <li>Membuat instance player menggunakan fungsi <code>create_player</code>.</li> <li>Memulai timer game menggunakan fungsi <code>start_timer</code> dari modul <code>game_stat</code>.</li> <li>Mendapatkan renderer dari instance game dan menampilkan UI transisi stage menggunakan fungsi <code>show_stage_transition</code>.</li> <li>Memainkan musik latar belakang untuk stage 0 menggunakan fungsi <code>play_music</code> dari modul <code>sfx</code>.</li> <li>Mengubah level game menjadi level 0 menggunakan fungsi <code>change_level</code> dari modul <code>level</code>.</li> </ul> stage0_state.c<pre><code>void stage0_init();\n</code></pre>"},{"location":"development/modules/stage0_state/#stage0_handle_input","title":"stage0_handle_input","text":"stage0_state.h<pre><code>void stage0_handle_input(SDL_Event *event);\n</code></pre> <p>Fungsi <code>stage0_handle_input</code> dipanggil setiap kali ada event input dari pengguna saat state <code>stage0_state</code> aktif. Fungsi ini bertanggung jawab untuk:</p> <ul> <li>Meneruskan event ke fungsi <code>handle_player_input</code> dari modul <code>player</code> untuk menangani input yang berkaitan dengan pemain.</li> <li>Memeriksa apakah tombol ESC ditekan. Jika ya, fungsi ini akan menghentikan musik, mendapatkan renderer, menampilkan UI pause menggunakan fungsi <code>show_pause_ui</code> dari modul <code>ui</code>, dan kemudian melanjutkan kembali musik latar belakang.</li> </ul>"},{"location":"development/modules/stage0_state/#stage0_update","title":"stage0_update","text":"stage0_state.h<pre><code>void stage0_update(double delta_time);\n</code></pre> <p>Fungsi <code>stage0_update</code> dipanggil setiap frame untuk memperbarui logika game dalam state <code>stage0_state</code>. Fungsi ini melakukan:</p> <ul> <li>Memperbarui posisi dan status player menggunakan fungsi <code>update_entity</code> dari modul <code>entity</code>.</li> <li>Memperbarui waktu yang telah berlalu dalam game menggunakan fungsi <code>get_elapsed_time</code> dari modul <code>game_stat</code>.</li> <li>Memeriksa apakah player telah mencapai pintu keluar level menggunakan fungsi <code>is_exit</code> dari modul <code>entity</code>. Jika ya, fungsi ini akan:<ul> <li>Mendapatkan renderer.</li> <li>Menampilkan UI transisi level menggunakan fungsi <code>show_level_transition</code> dari modul <code>ui</code>.</li> <li>Menaikkan nilai <code>current_level</code>.</li> <li>Mengubah level game ke level berikutnya menggunakan fungsi <code>change_level</code>.</li> <li>Menginisialisasi ulang posisi player berdasarkan level saat ini menggunakan fungsi <code>initiate_player</code> dari modul <code>player</code>.</li> </ul> </li> <li>Memeriksa kondisi game over (belum ada implementasi spesifik dalam snippet ini, tetapi biasanya akan melibatkan pengecekan nyawa atau kondisi kegagalan lainnya). Jika game over, state game akan diubah ke state lain (<code>gameover_state</code>).</li> </ul>"},{"location":"development/modules/stage0_state/#stage0_render","title":"stage0_render","text":"stage0_state.h<pre><code>void stage0_render(SDL_Renderer *renderer);\n</code></pre> <p>Fungsi <code>stage0_render</code> dipanggil setiap frame untuk merender tampilan game dalam state <code>stage0_state</code>. Fungsi ini bertanggung jawab untuk:</p> <ul> <li>Membersihkan layar renderer.</li> <li>Merender level saat ini menggunakan fungsi <code>render_level</code> dari modul <code>level</code>.</li> <li>Merender player menggunakan fungsi <code>render_player</code> dari modul <code>player</code>.</li> <li>Memperbarui tampilan pada layar.</li> </ul>"},{"location":"development/modules/stage0_state/#stage0_cleanup","title":"stage0_cleanup","text":"stage0_state.h<pre><code>void stage0_cleanup();\n</code></pre> <p>Fungsi <code>stage0_cleanup</code> dipanggil ketika state <code>stage0_state</code> akan diakhiri atau diganti dengan state lain. Fungsi ini bertanggung jawab untuk membersihkan sumber daya yang digunakan oleh state ini, meskipun dalam snippet ini implementasinya kosong.</p> stage0_state.c<pre><code>void stage0_cleanup()\n{\n  SDL_Log(\"Stage 0 State: Cleaned Up\");\n}\n</code></pre>"},{"location":"development/modules/stage0_state/#interaksi-dengan-modul-lain","title":"Interaksi dengan modul lain","text":"<p>Modul <code>stage0_state</code> berinteraksi dengan modul lain sebagai berikut:</p> <ul> <li>Modul <code>game</code>: Modul <code>stage0_state</code> menggunakan fungsi <code>get_game_instance()</code> untuk mendapatkan pointer ke struct <code>Game</code> dan mengakses renderer.</li> <li>Modul <code>game_state</code>: Modul <code>stage0_state</code> menggunakan fungsi <code>change_game_state()</code> untuk mengubah state game ke state lain, seperti <code>menu_state</code>.</li> <li>Modul <code>player</code>: Modul <code>stage0_state</code> menggunakan fungsi <code>create_player</code> untuk membuat player, <code>handle_player_input</code> untuk menangani input player, <code>update_entity</code> untuk memperbarui status player, <code>render_player</code> untuk merender player, dan <code>initiate_player</code> serta <code>reinitiate_player</code> untuk mengatur posisi awal player.</li> <li>Modul <code>level</code>: Modul <code>stage0_state</code> menggunakan fungsi <code>change_level</code> untuk mengubah level yang sedang dimainkan dan <code>render_level</code> untuk merender level.</li> <li>Modul <code>obstacles</code>: Meskipun tidak ada interaksi eksplisit yang terlihat dalam snippet, ada interaksi melalui modul <code>level</code> dalam hal penanganan rintangan di dalam level.</li> <li>Modul <code>entity</code>: Modul <code>stage0_state</code> menggunakan fungsi <code>update_entity</code> untuk memperbarui entitas player dan fungsi <code>is_exit</code> untuk memeriksa apakah player telah mencapai pintu keluar.</li> <li>Modul <code>game_stat</code>: Modul <code>stage0_state</code> menggunakan fungsi <code>start_timer</code> untuk memulai timer game dan <code>get_elapsed_time</code> untuk mendapatkan waktu yang telah berlalu.</li> <li>Modul <code>ui</code>: Modul <code>stage0_state</code> menggunakan fungsi <code>show_stage_transition</code> dan <code>show_level_transition</code> untuk menampilkan UI transisi, serta <code>show_pause_ui</code> untuk menampilkan UI pause.</li> <li>Modul <code>sfx</code>: Modul <code>stage0_state</code> menggunakan fungsi <code>play_music</code> untuk memainkan musik latar belakang dan <code>stop_music</code> untuk menghentikannya.</li> </ul>"},{"location":"development/modules/transform/","title":"Modul <code>transform</code>","text":"<p>Pembuat: Ikhsan Satriadi (241511080)</p> <p>File: <code>transform.h</code></p>"},{"location":"development/modules/transform/#struktur-transform","title":"Struktur <code>Transform</code>","text":"transform.h<pre><code>typedef struct\n{\n  double x, y, w, h;\n} Transform;\n</code></pre> <p>Struktur <code>Transform</code> merepresentasikan posisi dan dimensi dari suatu objek dalam game. Struktur ini memiliki anggota sebagai berikut:</p> <ul> <li><code>x</code>: Koordinat x (horizontal) dari objek (dalam satuan pixel).</li> <li><code>y</code>: Koordinat y (vertikal) dari objek (dalam satuan pixel).</li> <li><code>w</code>: Lebar (width) dari objek (dalam satuan pixel).</li> <li><code>h</code>: Tinggi (height) dari objek (dalam satuan pixel).</li> </ul>"},{"location":"development/modules/transform/#interaksi-dengan-modul-lain","title":"Interaksi dengan modul lain","text":"<p>Modul <code>transform</code> ini memiliki keterikatan yang erat dengan modul lain:</p> <ul> <li> <p>Bagian dari <code>Entity</code></p> <p>Struktur <code>Transform</code> digunakan sebagai salah satu anggota (subvariabel) di dalam struktur <code>Entity</code>. Contohnya, sebuah entity player akan memiliki variabel <code>Transform</code> untuk menentukan lokasinya di layar.</p> entity.h<pre><code>typedef struct\n{\n    Transform transform;\n    EntityRenderComponent render;\n    Physics physics;\n} Entity;\n</code></pre> <p>Modul <code>transform</code> juga berinteraksi erat dengan logika fisika entity &amp; player di modul <code>entity</code> &amp; <code>physics</code>. Informasi posisi (<code>x</code>, <code>y</code>) dan ukuran (<code>w</code>, <code>h</code>) dari <code>Transform</code> digunakan untuk mengimplementasikan gravitasi (memperbarui posisi <code>y</code>) dan pergerakan player (memperbarui posisi <code>x</code> dan <code>y</code> berdasarkan input dan kecepatan).</p> </li> <li> <p>Pengecekan collision dengan Tile Map</p> <p>Informasi posisi dan ukuran dari struktur <code>Transform</code> digunakan di dalam modul <code>entity</code> dan <code>level</code> untuk melakukan pengecekan terhadap tile map. Ini penting untuk deteksi tabrakan antara objek game (yang memiliki komponen <code>Transform</code>) dengan tile map. Misalnya, untuk mencegah player berjalan menembus dinding atau platform.</p> entity.c<pre><code>bool is_solid(Transform *transform) {\n  int left = transform-&gt;x / TILE_SIZE;\n  int right = (transform-&gt;x + transform-&gt;w - 1) / TILE_SIZE;\n  int top = transform-&gt;y / TILE_SIZE;\n  int bottom = (transform-&gt;y + transform-&gt;h - 1) / TILE_SIZE;\n\n  for (int y = top; y &lt;= bottom; y++) {\n      for (int x = left; x &lt;= right; x++) {\n          if (x &lt; 0 || x &gt;= MAP_WIDTH || y &lt; 0 || y &gt;= MAP_HEIGHT) {\n              return false;\n          }\n          for (size_t i = 0; i &lt; sizeof(solid_tiles) / sizeof(solid_tiles[0]); i++) {\n              if (current_level_map[y][x] == solid_tiles[i]) {\n                  return true;\n              }\n          }\n      }\n  }\n  return false;\n}\n</code></pre> </li> </ul>"},{"location":"development/modules/ui/","title":"Modul <code>UI</code>","text":"<p>Pembuat: Helga Athifa Hidayat (241511077) &amp; Ikhsan Satriadi (241511080)</p> <p>File: <code>ui.c</code> &amp; <code>ui.h</code></p>"},{"location":"development/modules/ui/#variabel-dan-konstanta","title":"Variabel dan Konstanta","text":""},{"location":"development/modules/ui/#pixelifysans_font","title":"PIXELIFYSANS_FONT","text":"<pre><code>#define PIXELIFYSANS_FONT \"assets/fonts/PixelifySans-Regular.ttf\"\n</code></pre> <p>Konstanta string yang mendefinisikan path file font yang digunakan untuk teks piksel.</p>"},{"location":"development/modules/ui/#sixtyfourconvergence_font","title":"SIXTYFOURCONVERGENCE_FONT","text":"<pre><code>#define SIXTYFOURCONVERGENCE_FONT \"assets/fonts/SixtyfourConvergence-Regular.ttf\"\n</code></pre> <p>Konstanta string yang mendefinisikan path file font yang digunakan untuk judul atau teks yang lebih besar.</p>"},{"location":"development/modules/ui/#sixtyfourconvergence_font_1","title":"sixtyfourconvergence_font","text":"<pre><code>extern TTF_Font *sixtyfourconvergence_font;\n</code></pre> <p>Variabel global yang menyimpan pointer ke font yang dimuat dari file <code>SIXTYFOURCONVERGENCE_FONT</code>.</p>"},{"location":"development/modules/ui/#pixelify_font","title":"pixelify_font","text":"<pre><code>extern TTF_Font *pixelify_font;\n</code></pre> <p>Variabel global yang menyimpan pointer ke font yang dimuat dari file <code>PIXELIFYSANS_FONT</code>.</p>"},{"location":"development/modules/ui/#penjelasan-setiap-fungsi","title":"Penjelasan Setiap Fungsi","text":""},{"location":"development/modules/ui/#init_font","title":"init_font","text":"ui.h<pre><code>void init_font();\n</code></pre> <p>Fungsi <code>init_font</code> menginisialisasi library SDL_ttf yang digunakan untuk rendering font. Kemudian, fungsi ini memuat dua file font yang ditentukan oleh konstanta <code>SIXTYFOURCONVERGENCE_FONT</code> dan <code>PIXELIFYSANS_FONT</code> dan menyimpan pointer ke font-font tersebut dalam variabel global <code>sixtyfourconvergence_font</code> dan <code>pixelify_font</code>. Jika inisialisasi SDL_ttf atau pemuatan font gagal, fungsi akan mencetak pesan error dan keluar dari program.</p> ui.c<pre><code>#include &lt;SDL3/SDL_ttf.h&gt;\n#include \"ui.h\"\n\nTTF_Font *sixtyfourconvergence_font;\nTTF_Font *pixelify_font;\n\n...\n\nvoid init_font()\n{\n    if (!TTF_Init())\n    {\n        SDL_Log(\"Failed to initialize SDL_ttf: %s\", SDL_GetError());\n        exit(1);\n    }\n    sixtyfourconvergence_font = TTF_OpenFont(SIXTYFOURCONVERGENCE_FONT, 36);\n    ...\n    pixelify_font = TTF_OpenFont(PIXELIFYSANS_FONT, 36);\n    ...\n}\n</code></pre>"},{"location":"development/modules/ui/#render_text","title":"render_text","text":"ui.h<pre><code>void render_text(SDL_Renderer *renderer, TTF_Font *font, const char *text, int x, int y, float scale, SDL_Color color);\n</code></pre> <p>Fungsi <code>render_text</code> menerima renderer SDL, font yang akan digunakan, teks yang akan dirender, posisi (x, y), skala, dan warna sebagai input. Fungsi ini membuat surface dari teks menggunakan font dan warna yang diberikan, kemudian membuat texture dari surface tersebut. Texture teks kemudian dirender ke layar pada posisi yang ditentukan dengan skala yang diberikan.</p> ui.c<pre><code>void render_text(SDL_Renderer *renderer, TTF_Font *font, const char *text, int x, int y, float scale, SDL_Color color)\n{\n    text_surface = TTF_RenderText_Solid(font, text, strlen(text), color);\n    text_texture = SDL_CreateTextureFromSurface(renderer, text_surface);\n\n    SDL_FRect dest_rect = {x, y, (float)text_surface-&gt;w, (float)text_surface-&gt;h};\n    SDL_SetRenderScale(renderer, scale, scale);\n    SDL_RenderTexture(renderer, text_texture, NULL, &amp;dest_rect);\n    SDL_SetRenderScale(renderer, 1, 1);\n    ...\n}\n</code></pre>"},{"location":"development/modules/ui/#render_game_ui","title":"render_game_ui","text":"ui.h<pre><code>void render_game_ui(SDL_Renderer *renderer, GameStat *stat);\n</code></pre> <p>Fungsi <code>render_game_ui</code> bertanggung jawab untuk menampilkan elemen-elemen antarmuka pengguna selama permainan berlangsung. Fungsi ini menerima renderer SDL dan pointer ke struktur <code>GameStat</code> sebagai input. Berdasarkan isi dari <code>GameStat</code>, fungsi ini akan menampilkan informasi seperti skor, level, atau health player di layar.</p>"},{"location":"development/modules/ui/#show_game_over_ui","title":"show_game_over_ui","text":"ui.h<pre><code>void show_game_over_ui(SDL_Renderer *renderer, GameStat stat);\n</code></pre> <p>Fungsi <code>show_game_over_ui</code> menampilkan layar \"Game Over\" kepada pemain. Fungsi ini menerima renderer SDL dan struktur <code>GameStat</code> sebagai input. Fungsi ini akan menampilkan teks \"Game Over\" dan juga skor akhir pemain, serta opsi untuk kembali ke menu utama.</p>"},{"location":"development/modules/ui/#show_pause_ui","title":"show_pause_ui","text":"ui.h<pre><code>void show_pause_ui(SDL_Renderer *renderer);\n</code></pre> <p>Fungsi <code>show_pause_ui</code> menampilkan layar \"Pause\" ketika pemain menjeda permainan. Fungsi ini menerima renderer SDL sebagai input. Fungsi ini akan menampilkan teks \"Paused\" dan opsi untuk melanjutkan permainan atau kembali ke menu utama.</p>"},{"location":"development/modules/ui/#show_level_transition","title":"show_level_transition","text":"ui.h<pre><code>void show_level_transition(SDL_Renderer *renderer, int stage, int level);\n</code></pre> <p>Fungsi <code>show_level_transition</code> menampilkan layar transisi antar level. Fungsi ini menerima renderer SDL, nomor stage, dan nomor level berikutnya sebagai input. Fungsi ini akan menampilkan informasi tentang stage dan level yang akan datang.</p>"},{"location":"development/modules/ui/#show_stage_transition","title":"show_stage_transition","text":"ui.h<pre><code>void show_stage_transition(SDL_Renderer *renderer, int stage);\n</code></pre> <p>Fungsi <code>show_stage_transition</code> menampilkan layar transisi antar stage. Fungsi ini menerima renderer SDL dan nomor stage berikutnya sebagai input. Fungsi ini akan menampilkan informasi tentang stage yang akan datang.</p>"},{"location":"development/modules/ui/#show_congratulations_ui","title":"show_congratulations_ui","text":"ui.h<pre><code>void show_congratulations_ui(SDL_Renderer *renderer, GameStat stat);\n</code></pre> <p>Fungsi <code>show_congratulations_ui</code> menampilkan layar ucapan selamat ketika pemain telah menyelesaikan permainan. Fungsi ini menerima renderer SDL dan struktur <code>GameStat</code> sebagai input. Fungsi ini akan menampilkan teks \"Congratulations\" dan juga statistik akhir pemain.</p>"},{"location":"development/modules/ui/#clean_up_ui","title":"clean_up_ui","text":"ui.h<pre><code>void clean_up_ui();\n</code></pre> <p>Fungsi <code>clean_up_ui</code> bertugas untuk membersihkan semua sumber daya yang telah dialokasikan oleh modul UI. Ini termasuk menutup font yang telah dimuat dan menghentikan library SDL_ttf.</p> ui.c<pre><code>void clean_up_ui()\n{\n    TTF_CloseFont(sixtyfourconvergence_font);\n    TTF_CloseFont(pixelify_font);\n    TTF_Quit();\n}\n</code></pre>"},{"location":"development/modules/ui/#interaksi-dengan-modul-lain","title":"Interaksi dengan modul lain","text":"<p>Modul <code>ui</code> berinteraksi dengan beberapa modul lain dalam game:</p> <ul> <li> <p>Membuat Tampilan Menu dan Membuat Teks</p> <p>Fungsi <code>render_text</code> digunakan untuk menampilkan teks pada tampilan game. Selain itu, <code>render_text</code> juga digunakan untuk menampilkan teks pada UI menu.</p> </li> <li> <p>Stage state</p> <p>Memanggil fungsi <code>show_stage_transition</code> dan <code>show_level_transition</code> untuk menampilkan UI transisi antar stage dan level. Selain itu,  fungsi <code>render_game_ui</code> juga digunakan untuk menampilkan UI game.</p> </li> <li> <p>Modul game_stat</p> <p>Digunakan untuk mendapatkan informasi statistik game yang akan ditampilkan oleh UI (misalnya, skor).</p> </li> <li> <p>Modul level</p> <p>Digunakan untuk mendapatkan informasi tentang level atau stage saat ini yang akan ditampilkan pada UI transisi.</p> </li> <li> <p>Modul SFX</p> <p>Digunakan untuk memutar musik kemenangan pada tampilan pause, game over dan congratulations.</p> </li> <li> <p>Main program <code>main.c</code></p> <p>Digunakan untuk memuat dan memuat font yang digunakan dalam UI dan juga membersihkan resource yang digunakan oleh UI saat program berakhir.</p> </li> </ul>"},{"location":"development/modules/util/","title":"Modul <code>util</code>","text":"<p>Pembuat: Hanifidin Ibrahim (241511076)</p> <p>File: <code>util.c</code> &amp; <code>util.h</code></p>"},{"location":"development/modules/util/#penjelasan-setiap-fungsi","title":"Penjelasan Setiap Fungsi","text":""},{"location":"development/modules/util/#get_time_string","title":"get_time_string","text":"util.h<pre><code>char *get_time_string(unsigned int time);\n</code></pre> <p>Fungsi <code>get_time_string</code> menerima waktu dalam detik (unsigned integer) sebagai input dan mengembalikan string yang diformat untuk merepresentasikan waktu tersebut dalam format yang mudah dibaca (misalnya, \"Xh Ym Zs\", \"Ym Zs\", atau \"Zs\").</p> util.c<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include \"util.h\"\n\nchar *get_time_string(unsigned int time) {\n    // Alokasi memori untuk string waktu\n    char *time_string = (char *)malloc(20 * sizeof(char));\n\n    if (time_string == NULL) {\n        return NULL; // Jika gagal mengalokasi memori\n    }\n\n    unsigned int hours = time / 3600;         // Menghitung jam\n    unsigned int minutes = (time % 3600) / 60; // Menghitung menit\n    unsigned int seconds = time % 60;       // Menghitung detik\n\n    // Formatkan string berdasarkan waktu\n    if (hours &gt; 0) {\n        sprintf(time_string, \"%uh %um %us\", hours, minutes, seconds);\n    } else if (minutes &gt; 0) {\n        sprintf(time_string, \"%um %us\", minutes, seconds);\n    } else {\n        sprintf(time_string, \"%us\", seconds);\n    }\n\n    return time_string;\n}\n</code></pre>"},{"location":"development/modules/util/#interaksi-dengan-modul-lain","title":"Interaksi dengan modul lain","text":"<p>Modul <code>util</code> berinteraksi dengan modul <code>ui</code> untuk menampilkan informasi waktu yang telah berlalu pada layar \"Game Over\" dan \"Congratulations\". Secara spesifik:</p> <ul> <li>Modul <code>ui</code>: Fungsi <code>get_time_string</code> dari modul <code>util</code> dipanggil oleh fungsi-fungsi di modul <code>ui</code> (yaitu <code>show_game_over_ui</code> dan <code>show_congratulations_ui</code>) untuk memformat waktu yang telah berlalu (didapatkan dari modul <code>game_stat</code>) menjadi string yang dapat ditampilkan kepada pemain. Ini memungkinkan pemain untuk melihat berapa lama mereka bermain sebelum game berakhir atau berhasil diselesaikan.</li> </ul>"},{"location":"development/modules/vector/","title":"Modul <code>vector</code>","text":"<p>Pembuat: Muhamad Syahid (241511081)</p> <p>File: <code>vector.h</code></p>"},{"location":"development/modules/vector/#struktur-vector","title":"Struktur <code>Vector</code>","text":"vector.h<pre><code>typedef struct\n{\n    int y, x;\n} Vector;\n</code></pre> <p>Struktur <code>Vector</code> merepresentasikan sebuah vektor 2D dengan komponen integer. Struktur ini memiliki anggota sebagai berikut:</p> <ul> <li><code>y</code>: Komponen y (vertikal) dari vektor.</li> <li><code>x</code>: Komponen x (horizontal) dari vektor.</li> </ul>"},{"location":"development/modules/vector/#interaksi-dengan-modul-lain","title":"Interaksi dengan modul lain","text":"<ul> <li> <p>Posisi 'Button' dan 'Switch'</p> <p>Struktur <code>Vector</code> digunakan sebagai sebuah posisi untuk menentukan posisi beberapa Obstacle, salah satunya Switch dan Button dalam level.</p> level.c<pre><code>Switch buttonL1;\n\n...\n\nvoid change_level(int level)\n{\n  switch (level)\n  {\n    case 1:\n    memcpy(current_level_map,level1_map,sizeof(level1_map));\n    buttonL1 = (Switch){\n      .button = {13,6},\n      .switches = {{13,7},{13,8},\n                  {14,7},{14,8},\n                  {15,7},{15,8},\n                  {16,7},{16,8},\n                  {17,7},{17,8},\n                  {18,7},{18,8},\n                  {19,7},{19,8},\n      }\n    };\n    break;\n\n  ...\n\n  }\n\n  ...\n}\n</code></pre> </li> </ul>"}]}